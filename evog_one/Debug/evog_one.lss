
evog_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005a2  00802000  00001ad0  00001b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008025a2  008025a2  00002106  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b3a  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033a7  00000000  00000000  00007e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010bc  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  0000c2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002aea  00000000  00000000  0000c680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed9  00000000  00000000  0000f16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00010043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__ctors_end>
       4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
       c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      10:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      18:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      1c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      20:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      24:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      28:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      2c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      30:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      34:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      38:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_14>
      3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      40:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      44:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      48:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      4c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      50:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      54:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      58:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      5c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      60:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      64:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      68:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      6c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      70:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_28>
      74:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_29>
      78:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_30>
      7c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      80:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      84:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      88:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      8c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      90:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      94:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      98:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      9c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      dc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      e8:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_58>
      ec:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_59>
      f0:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_60>
      f4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      f8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
      fc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     100:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     104:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     108:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     10c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     110:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     114:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     118:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     11c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     120:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     124:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     128:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     12c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     130:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     134:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     138:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     13c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     140:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     144:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     148:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     14c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     150:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     154:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     158:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     15c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     160:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     164:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     168:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     16c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     170:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     174:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     178:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     17c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     180:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     184:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     188:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     18c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     190:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     194:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     198:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     19c:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1a8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1ac:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1b8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1bc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1c8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1cc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1d8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1dc:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1e8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1ec:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f0:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f4:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>
     1f8:	0c 94 42 01 	jmp	0x284	; 0x284 <__bad_interrupt>

000001fc <__trampolines_end>:
     1fc:	4e 41       	sbci	r20, 0x1E	; 30
     1fe:	4e 49       	Address 0x000001fe is out of bounds.
.word	0xffff	; ????

000001ff <pstr_inity>:
     1ff:	49 4e 49 54 59                                      INITY

00000204 <pstr_inf>:
     204:	49 4e 46                                            INF

00000207 <pwr_m10>:
     207:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     217:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021f <pwr_p10>:
     21f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22f:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000238 <__ctors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df e3       	ldi	r29, 0x3F	; 63
     242:	de bf       	out	0x3e, r29	; 62
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60
     248:	18 be       	out	0x38, r1	; 56
     24a:	19 be       	out	0x39, r1	; 57
     24c:	1a be       	out	0x3a, r1	; 58
     24e:	1b be       	out	0x3b, r1	; 59

00000250 <__do_copy_data>:
     250:	15 e2       	ldi	r17, 0x25	; 37
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e2       	ldi	r27, 0x20	; 32
     256:	e0 ed       	ldi	r30, 0xD0	; 208
     258:	fa e1       	ldi	r31, 0x1A	; 26
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0b bf       	out	0x3b, r16	; 59
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x14>
     260:	07 90       	elpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a2 3a       	cpi	r26, 0xA2	; 162
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0x10>
     26a:	1b be       	out	0x3b, r1	; 59

0000026c <__do_clear_bss>:
     26c:	25 e2       	ldi	r18, 0x25	; 37
     26e:	a2 ea       	ldi	r26, 0xA2	; 162
     270:	b5 e2       	ldi	r27, 0x25	; 37
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a3 3b       	cpi	r26, 0xB3	; 179
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 c4 06 	call	0xd88	; 0xd88 <main>
     280:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <_exit>

00000284 <__bad_interrupt>:
     284:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000288 <_ZN10ComHandlerC1EP4Tcc0P7UsartE0>:
#include <string.h>
#include "ComHandler.h"
#include "data_sample.h"
#include "vvm.h"

ComHandler::ComHandler(Tcc0* myTimer0, UsartE0* myUsart0)
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	fc 01       	movw	r30, r24
     28e:	dc 01       	movw	r26, r24
     290:	a9 56       	subi	r26, 0x69	; 105
     292:	bf 4f       	sbci	r27, 0xFF	; 255
     294:	1d 92       	st	X+, r1
     296:	1d 92       	st	X+, r1
     298:	1d 92       	st	X+, r1
     29a:	1c 92       	st	X, r1
     29c:	13 97       	sbiw	r26, 0x03	; 3
     29e:	ec 01       	movw	r28, r24
     2a0:	c5 56       	subi	r28, 0x65	; 101
     2a2:	df 4f       	sbci	r29, 0xFF	; 255
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	a8 ec       	ldi	r26, 0xC8	; 200
     2aa:	b2 e4       	ldi	r27, 0x42	; 66
     2ac:	88 83       	st	Y, r24
     2ae:	99 83       	std	Y+1, r25	; 0x01
     2b0:	aa 83       	std	Y+2, r26	; 0x02
     2b2:	bb 83       	std	Y+3, r27	; 0x03
     2b4:	24 96       	adiw	r28, 0x04	; 4
     2b6:	18 82       	st	Y, r1
     2b8:	19 82       	std	Y+1, r1	; 0x01
     2ba:	1a 82       	std	Y+2, r1	; 0x02
     2bc:	1b 82       	std	Y+3, r1	; 0x03
     2be:	24 96       	adiw	r28, 0x04	; 4
     2c0:	88 83       	st	Y, r24
     2c2:	99 83       	std	Y+1, r25	; 0x01
     2c4:	aa 83       	std	Y+2, r26	; 0x02
     2c6:	bb 83       	std	Y+3, r27	; 0x03
{
	state = HEATING;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 83       	st	Z, r24
	this->myTimer0 = myTimer0;
     2cc:	63 8b       	std	Z+19, r22	; 0x13
     2ce:	74 8b       	std	Z+20, r23	; 0x14
	this->myUsart0 = myUsart0;
     2d0:	45 8b       	std	Z+21, r20	; 0x15
     2d2:	56 8b       	std	Z+22, r21	; 0x16
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <_ZN10ComHandler15questionHandlerENS_10question_eE>:
	return responseBuf;
}

void ComHandler::questionHandler(question_e q)
{
	switch(q)
     2da:	63 3a       	cpi	r22, 0xA3	; 163
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x6>
     2de:	47 c0       	rjmp	.+142    	; 0x36e <_ZN10ComHandler15questionHandlerENS_10question_eE+0x94>
     2e0:	28 f4       	brcc	.+10     	; 0x2ec <_ZN10ComHandler15questionHandlerENS_10question_eE+0x12>
     2e2:	60 3a       	cpi	r22, 0xA0	; 160
     2e4:	69 f0       	breq	.+26     	; 0x300 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x26>
     2e6:	61 3a       	cpi	r22, 0xA1	; 161
     2e8:	31 f1       	breq	.+76     	; 0x336 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x5c>
     2ea:	75 c0       	rjmp	.+234    	; 0x3d6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xfc>
     2ec:	68 3a       	cpi	r22, 0xA8	; 168
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x18>
     2f0:	58 c0       	rjmp	.+176    	; 0x3a2 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xc8>
     2f2:	69 3a       	cpi	r22, 0xA9	; 169
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x1e>
     2f6:	62 c0       	rjmp	.+196    	; 0x3bc <_ZN10ComHandler15questionHandlerENS_10question_eE+0xe2>
     2f8:	64 3a       	cpi	r22, 0xA4	; 164
     2fa:	09 f0       	breq	.+2      	; 0x2fe <_ZN10ComHandler15questionHandlerENS_10question_eE+0x24>
     2fc:	6c c0       	rjmp	.+216    	; 0x3d6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xfc>
     2fe:	44 c0       	rjmp	.+136    	; 0x388 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xae>
     300:	dc 01       	movw	r26, r24
	{
		case QUESTION_STATE:
		responseBuf[0] = q + 0x10;
     302:	80 eb       	ldi	r24, 0xB0	; 176
     304:	57 96       	adiw	r26, 0x17	; 23
     306:	8c 93       	st	X, r24
     308:	57 97       	sbiw	r26, 0x17	; 23
		snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "%d\r", state);
     30a:	8c 91       	ld	r24, X
     30c:	1f 92       	push	r1
     30e:	8f 93       	push	r24
     310:	8a e3       	ldi	r24, 0x3A	; 58
     312:	95 e2       	ldi	r25, 0x25	; 37
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	1f 92       	push	r1
     31a:	8f e3       	ldi	r24, 0x3F	; 63
     31c:	8f 93       	push	r24
     31e:	cd 01       	movw	r24, r26
     320:	48 96       	adiw	r24, 0x18	; 24
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	0e 94 b4 09 	call	0x1368	; 0x1368 <snprintf>
		break;
     32a:	8d b7       	in	r24, 0x3d	; 61
     32c:	9e b7       	in	r25, 0x3e	; 62
     32e:	08 96       	adiw	r24, 0x08	; 8
     330:	8d bf       	out	0x3d, r24	; 61
     332:	9e bf       	out	0x3e, r25	; 62
     334:	08 95       	ret
		
		case QUESTION_HEATING:
		responseBuf[0] = q + 0x10;
     336:	21 eb       	ldi	r18, 0xB1	; 177
     338:	fc 01       	movw	r30, r24
     33a:	27 8b       	std	Z+23, r18	; 0x17
		if (state == IDLE) snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "0\r");
     33c:	20 81       	ld	r18, Z
     33e:	21 11       	cpse	r18, r1
     340:	06 c0       	rjmp	.+12     	; 0x34e <_ZN10ComHandler15questionHandlerENS_10question_eE+0x74>
     342:	20 e3       	ldi	r18, 0x30	; 48
     344:	3d e0       	ldi	r19, 0x0D	; 13
     346:	20 8f       	std	Z+24, r18	; 0x18
     348:	31 8f       	std	Z+25, r19	; 0x19
     34a:	12 8e       	std	Z+26, r1	; 0x1a
     34c:	08 95       	ret
		else if (state == HEATING) snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     34e:	21 30       	cpi	r18, 0x01	; 1
     350:	39 f4       	brne	.+14     	; 0x360 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x86>
     352:	21 e3       	ldi	r18, 0x31	; 49
     354:	3d e0       	ldi	r19, 0x0D	; 13
     356:	fc 01       	movw	r30, r24
     358:	20 8f       	std	Z+24, r18	; 0x18
     35a:	31 8f       	std	Z+25, r19	; 0x19
     35c:	12 8e       	std	Z+26, r1	; 0x1a
     35e:	08 95       	ret
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "2\r");
     360:	22 e3       	ldi	r18, 0x32	; 50
     362:	3d e0       	ldi	r19, 0x0D	; 13
     364:	fc 01       	movw	r30, r24
     366:	20 8f       	std	Z+24, r18	; 0x18
     368:	31 8f       	std	Z+25, r19	; 0x19
     36a:	12 8e       	std	Z+26, r1	; 0x1a
     36c:	08 95       	ret
		break;
		
		case QUESTION_DATE:
		responseBuf[0] = q + 0x10;
     36e:	23 eb       	ldi	r18, 0xB3	; 179
     370:	fc 01       	movw	r30, r24
     372:	27 8b       	std	Z+23, r18	; 0x17
		snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "20170610\r");
     374:	dc 01       	movw	r26, r24
     376:	58 96       	adiw	r26, 0x18	; 24
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	ee e3       	ldi	r30, 0x3E	; 62
     37c:	f5 e2       	ldi	r31, 0x25	; 37
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <_ZN10ComHandler15questionHandlerENS_10question_eE+0xa4>
		break;
     386:	08 95       	ret
		
		case QUESTION_TIME:
		responseBuf[0] = q + 0x10;
     388:	24 eb       	ldi	r18, 0xB4	; 180
     38a:	fc 01       	movw	r30, r24
     38c:	27 8b       	std	Z+23, r18	; 0x17
		snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "123456\r");
     38e:	dc 01       	movw	r26, r24
     390:	58 96       	adiw	r26, 0x18	; 24
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	e8 e4       	ldi	r30, 0x48	; 72
     396:	f5 e2       	ldi	r31, 0x25	; 37
     398:	01 90       	ld	r0, Z+
     39a:	0d 92       	st	X+, r0
     39c:	8a 95       	dec	r24
     39e:	e1 f7       	brne	.-8      	; 0x398 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xbe>
		break;
     3a0:	08 95       	ret
		
		case QUESTION_ROOM_TEMPERATURE:
		responseBuf[0] = q + 0x10;
     3a2:	28 eb       	ldi	r18, 0xB8	; 184
     3a4:	fc 01       	movw	r30, r24
     3a6:	27 8b       	std	Z+23, r18	; 0x17
		snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "250\r");
     3a8:	dc 01       	movw	r26, r24
     3aa:	58 96       	adiw	r26, 0x18	; 24
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	e0 e5       	ldi	r30, 0x50	; 80
     3b0:	f5 e2       	ldi	r31, 0x25	; 37
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	8a 95       	dec	r24
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xd8>
		break;
     3ba:	08 95       	ret
		
		case QUESTION_SENSOR_TEMPERATURE:
		responseBuf[0] = q + 0x10;
     3bc:	29 eb       	ldi	r18, 0xB9	; 185
     3be:	fc 01       	movw	r30, r24
     3c0:	27 8b       	std	Z+23, r18	; 0x17
		snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "340\r");
     3c2:	dc 01       	movw	r26, r24
     3c4:	58 96       	adiw	r26, 0x18	; 24
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	e5 e5       	ldi	r30, 0x55	; 85
     3ca:	f5 e2       	ldi	r31, 0x25	; 37
     3cc:	01 90       	ld	r0, Z+
     3ce:	0d 92       	st	X+, r0
     3d0:	8a 95       	dec	r24
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <_ZN10ComHandler15questionHandlerENS_10question_eE+0xf2>
		break;
     3d4:	08 95       	ret
		
		default:
		responseBuf[0] = UNKNOWN_COMMAND;
     3d6:	20 ee       	ldi	r18, 0xE0	; 224
     3d8:	fc 01       	movw	r30, r24
     3da:	27 8b       	std	Z+23, r18	; 0x17
		responseBuf[1] = '\r';
     3dc:	2d e0       	ldi	r18, 0x0D	; 13
     3de:	20 8f       	std	Z+24, r18	; 0x18
		responseBuf[2] = '\0';
     3e0:	11 8e       	std	Z+25, r1	; 0x19
     3e2:	08 95       	ret

000003e4 <_ZN10ComHandler13changeHandlerENS_8change_eE>:
		break;
	}
}

void ComHandler::changeHandler(change_e c)
{
     3e4:	4f 92       	push	r4
     3e6:	5f 92       	push	r5
     3e8:	6f 92       	push	r6
     3ea:	7f 92       	push	r7
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	1f 92       	push	r1
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	fc 01       	movw	r30, r24
	int index = 0;
	char* decayed_buf = &receiveBuf[0];
     40e:	6c 01       	movw	r12, r24
     410:	87 e5       	ldi	r24, 0x57	; 87
     412:	c8 0e       	add	r12, r24
     414:	d1 1c       	adc	r13, r1
     416:	c9 82       	std	Y+1, r12	; 0x01
     418:	da 82       	std	Y+2, r13	; 0x02
	char** endptr1 = &decayed_buf;
	char** endptr2 = endptr1;
	
	switch (c)
     41a:	68 3c       	cpi	r22, 0xC8	; 200
     41c:	c9 f1       	breq	.+114    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     41e:	38 f4       	brcc	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     420:	61 3c       	cpi	r22, 0xC1	; 193
     422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	53 c0       	rjmp	.+166    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     426:	62 3c       	cpi	r22, 0xC2	; 194
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	6f c0       	rjmp	.+222    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     42c:	49 c1       	rjmp	.+658    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     42e:	6a 3c       	cpi	r22, 0xCA	; 202
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	09 c1       	rjmp	.+530    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     434:	08 f4       	brcc	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	26 c1       	rjmp	.+588    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     438:	6b 3c       	cpi	r22, 0xCB	; 203
     43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	41 c1       	rjmp	.+642    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
	{
		case CHANGE_START_DATA_SAMPLE:
		responseBuf[0] = '\0';
     43e:	17 8a       	std	Z+23, r1	; 0x17
		if (state == IDLE)
     440:	80 81       	ld	r24, Z
     442:	81 11       	cpse	r24, r1
     444:	1f c0       	rjmp	.+62     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		{
			//snprintf(global_txBuf+1, TX_LEN-1, "0\r");
			sampleIndex = -1;
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	9f ef       	ldi	r25, 0xFF	; 255
     44a:	81 83       	std	Z+1, r24	; 0x01
     44c:	92 83       	std	Z+2, r25	; 0x02
	static volatile double time_s;
	static volatile double timeIncrement_s;
	static volatile bool ovfFlag;
	
	Tcc0(Tcc::clock_s, Utils::interruptLevel_e);
	double getTime_s(){return time_s;};
     44e:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     452:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     456:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     45a:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     45e:	83 83       	std	Z+3, r24	; 0x03
     460:	94 83       	std	Z+4, r25	; 0x04
     462:	a5 83       	std	Z+5, r26	; 0x05
     464:	b6 83       	std	Z+6, r27	; 0x06
     466:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     46a:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     46e:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     472:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag2 = myTimer0->getTime_s();
     476:	87 83       	std	Z+7, r24	; 0x07
     478:	90 87       	std	Z+8, r25	; 0x08
     47a:	a1 87       	std	Z+9, r26	; 0x09
     47c:	b2 87       	std	Z+10, r27	; 0x0a
			state = DATA_SAMPLE;
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	80 83       	st	Z, r24
     482:	23 c1       	rjmp	.+582    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     484:	81 e3       	ldi	r24, 0x31	; 49
     486:	9d e0       	ldi	r25, 0x0D	; 13
     488:	80 8f       	std	Z+24, r24	; 0x18
     48a:	91 8f       	std	Z+25, r25	; 0x19
     48c:	12 8e       	std	Z+26, r1	; 0x1a
     48e:	1d c1       	rjmp	.+570    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		break;

		case CHANGE_TO_DATA_SAMPLE:
		responseBuf[0] = c + 0x10;
     490:	88 ed       	ldi	r24, 0xD8	; 216
     492:	87 8b       	std	Z+23, r24	; 0x17
		if (state == IDLE)
     494:	80 81       	ld	r24, Z
     496:	81 11       	cpse	r24, r1
     498:	13 c0       	rjmp	.+38     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		{
			snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "0\r");
     49a:	80 e3       	ldi	r24, 0x30	; 48
     49c:	9d e0       	ldi	r25, 0x0D	; 13
     49e:	80 8f       	std	Z+24, r24	; 0x18
     4a0:	91 8f       	std	Z+25, r25	; 0x19
     4a2:	12 8e       	std	Z+26, r1	; 0x1a
     4a4:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     4a8:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     4ac:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     4b0:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     4b4:	83 83       	std	Z+3, r24	; 0x03
     4b6:	94 83       	std	Z+4, r25	; 0x04
     4b8:	a5 83       	std	Z+5, r26	; 0x05
     4ba:	b6 83       	std	Z+6, r27	; 0x06
			state = IDLE;
     4bc:	10 82       	st	Z, r1
     4be:	05 c1       	rjmp	.+522    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     4c0:	81 e3       	ldi	r24, 0x31	; 49
     4c2:	9d e0       	ldi	r25, 0x0D	; 13
     4c4:	80 8f       	std	Z+24, r24	; 0x18
     4c6:	91 8f       	std	Z+25, r25	; 0x19
     4c8:	12 8e       	std	Z+26, r1	; 0x1a
     4ca:	ff c0       	rjmp	.+510    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		break;
		
		case CHANGE_TO_AUTOCAL:
		responseBuf[0] = c + 0x10;
     4cc:	81 ed       	ldi	r24, 0xD1	; 209
     4ce:	87 8b       	std	Z+23, r24	; 0x17
		if (state == IDLE)
     4d0:	80 81       	ld	r24, Z
     4d2:	81 11       	cpse	r24, r1
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		{
			snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "0\r");
     4d6:	80 e3       	ldi	r24, 0x30	; 48
     4d8:	9d e0       	ldi	r25, 0x0D	; 13
     4da:	80 8f       	std	Z+24, r24	; 0x18
     4dc:	91 8f       	std	Z+25, r25	; 0x19
     4de:	12 8e       	std	Z+26, r1	; 0x1a
     4e0:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     4e4:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     4e8:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     4ec:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     4f0:	83 83       	std	Z+3, r24	; 0x03
     4f2:	94 83       	std	Z+4, r25	; 0x04
     4f4:	a5 83       	std	Z+5, r26	; 0x05
     4f6:	b6 83       	std	Z+6, r27	; 0x06
			state = AUTOCAL;
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	80 83       	st	Z, r24
     4fc:	e6 c0       	rjmp	.+460    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     4fe:	81 e3       	ldi	r24, 0x31	; 49
     500:	9d e0       	ldi	r25, 0x0D	; 13
     502:	80 8f       	std	Z+24, r24	; 0x18
     504:	91 8f       	std	Z+25, r25	; 0x19
     506:	12 8e       	std	Z+26, r1	; 0x1a
     508:	e0 c0       	rjmp	.+448    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     50a:	7f 01       	movw	r14, r30
		break;
		
		case CHANGE_TO_GASCAL:
		responseBuf[0] = c + 0x10;
     50c:	82 ed       	ldi	r24, 0xD2	; 210
     50e:	87 8b       	std	Z+23, r24	; 0x17
     510:	8f 01       	movw	r16, r30
     512:	09 5a       	subi	r16, 0xA9	; 169
     514:	1f 4f       	sbci	r17, 0xFF	; 255
	
	static volatile bool rxcFlag;
	static volatile bool txcFlag;
	static volatile bool dreFlag;
	
	bool isRXC(){return rxcFlag;};
     516:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <_ZN7UsartE07rxcFlagE>
		while (true) // breaks off when '\r' is received
		{
			while (!myUsart0->isRXC()) ; // wait for data
     51a:	88 23       	and	r24, r24
     51c:	e1 f3       	breq	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			receiveBuf[index++] = myUsart0->getChar(); // append to buffer
     51e:	f7 01       	movw	r30, r14
     520:	85 89       	ldd	r24, Z+21	; 0x15
     522:	96 89       	ldd	r25, Z+22	; 0x16
     524:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN7UsartE07getCharEv>
     528:	f8 01       	movw	r30, r16
     52a:	81 93       	st	Z+, r24
     52c:	8f 01       	movw	r16, r30
	bool isTXC(){return txcFlag;};
	bool isDRE(){return dreFlag;};
	
	void setRXC(bool b){rxcFlag = b;};
     52e:	10 92 b0 25 	sts	0x25B0, r1	; 0x8025b0 <_ZN7UsartE07rxcFlagE>
			myUsart0->setRXC(false);
			if (receiveBuf[index-1] == '\r') break;
     532:	8d 30       	cpi	r24, 0x0D	; 13
     534:	81 f7       	brne	.-32     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
		}
		gascal_o2 = strtod(receiveBuf, endptr1); // read O2
     536:	be 01       	movw	r22, r28
     538:	6f 5f       	subi	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	c6 01       	movw	r24, r12
     53e:	0e 94 30 08 	call	0x1060	; 0x1060 <strtod>
     542:	f7 01       	movw	r30, r14
     544:	63 87       	std	Z+11, r22	; 0x0b
     546:	74 87       	std	Z+12, r23	; 0x0c
     548:	85 87       	std	Z+13, r24	; 0x0d
     54a:	96 87       	std	Z+14, r25	; 0x0e
		gascal_co2 = strtod(*endptr1, endptr2); // read CO2
     54c:	be 01       	movw	r22, r28
     54e:	6f 5f       	subi	r22, 0xFF	; 255
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	0e 94 30 08 	call	0x1060	; 0x1060 <strtod>
     55a:	2b 01       	movw	r4, r22
     55c:	3c 01       	movw	r6, r24
     55e:	f7 01       	movw	r30, r14
     560:	67 87       	std	Z+15, r22	; 0x0f
     562:	70 8b       	std	Z+16, r23	; 0x10
     564:	81 8b       	std	Z+17, r24	; 0x11
     566:	92 8b       	std	Z+18, r25	; 0x12
		memset(receiveBuf,'\0', *endptr2-receiveBuf); // clear buffer
     568:	49 81       	ldd	r20, Y+1	; 0x01
     56a:	5a 81       	ldd	r21, Y+2	; 0x02
     56c:	4c 19       	sub	r20, r12
     56e:	5d 09       	sbc	r21, r13
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	c6 01       	movw	r24, r12
     576:	0e 94 ad 09 	call	0x135a	; 0x135a <memset>
		if (gascal_o2 < MIN_O2 || gascal_o2 > MAX_O2 ||
     57a:	f7 01       	movw	r30, r14
     57c:	83 84       	ldd	r8, Z+11	; 0x0b
     57e:	94 84       	ldd	r9, Z+12	; 0x0c
     580:	a5 84       	ldd	r10, Z+13	; 0x0d
     582:	b6 84       	ldd	r11, Z+14	; 0x0e
     584:	e9 56       	subi	r30, 0x69	; 105
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	20 81       	ld	r18, Z
     58a:	31 81       	ldd	r19, Z+1	; 0x01
     58c:	42 81       	ldd	r20, Z+2	; 0x02
     58e:	53 81       	ldd	r21, Z+3	; 0x03
     590:	c5 01       	movw	r24, r10
     592:	b4 01       	movw	r22, r8
     594:	0e 94 b1 07 	call	0xf62	; 0xf62 <__cmpsf2>
     598:	88 23       	and	r24, r24
     59a:	cc f1       	brlt	.+114    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     59c:	f7 01       	movw	r30, r14
     59e:	e5 56       	subi	r30, 0x65	; 101
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	20 81       	ld	r18, Z
     5a4:	31 81       	ldd	r19, Z+1	; 0x01
     5a6:	42 81       	ldd	r20, Z+2	; 0x02
     5a8:	53 81       	ldd	r21, Z+3	; 0x03
     5aa:	c5 01       	movw	r24, r10
     5ac:	b4 01       	movw	r22, r8
     5ae:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     5b2:	18 16       	cp	r1, r24
     5b4:	64 f1       	brlt	.+88     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		gascal_co2 < MIN_CO2 || gascal_co2 > MAX_CO2 ||
     5b6:	f7 01       	movw	r30, r14
     5b8:	e1 56       	subi	r30, 0x61	; 97
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
			if (receiveBuf[index-1] == '\r') break;
		}
		gascal_o2 = strtod(receiveBuf, endptr1); // read O2
		gascal_co2 = strtod(*endptr1, endptr2); // read CO2
		memset(receiveBuf,'\0', *endptr2-receiveBuf); // clear buffer
		if (gascal_o2 < MIN_O2 || gascal_o2 > MAX_O2 ||
     5bc:	20 81       	ld	r18, Z
     5be:	31 81       	ldd	r19, Z+1	; 0x01
     5c0:	42 81       	ldd	r20, Z+2	; 0x02
     5c2:	53 81       	ldd	r21, Z+3	; 0x03
     5c4:	c3 01       	movw	r24, r6
     5c6:	b2 01       	movw	r22, r4
     5c8:	0e 94 b1 07 	call	0xf62	; 0xf62 <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	fc f0       	brlt	.+62     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		gascal_co2 < MIN_CO2 || gascal_co2 > MAX_CO2 ||
     5d0:	f7 01       	movw	r30, r14
     5d2:	ed 55       	subi	r30, 0x5D	; 93
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	20 81       	ld	r18, Z
     5d8:	31 81       	ldd	r19, Z+1	; 0x01
     5da:	42 81       	ldd	r20, Z+2	; 0x02
     5dc:	53 81       	ldd	r21, Z+3	; 0x03
     5de:	c3 01       	movw	r24, r6
     5e0:	b2 01       	movw	r22, r4
     5e2:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     5e6:	18 16       	cp	r1, r24
     5e8:	94 f0       	brlt	.+36     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	48 ec       	ldi	r20, 0xC8	; 200
     5fc:	52 e4       	ldi	r21, 0x42	; 66
     5fe:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	24 f0       	brlt	.+8      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		gascal_o2 + gascal_co2 > 100 || state != IDLE) // error cases
     606:	f7 01       	movw	r30, r14
     608:	80 81       	ld	r24, Z
     60a:	88 23       	and	r24, r24
     60c:	39 f0       	breq	.+14     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
		{
			snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     60e:	81 e3       	ldi	r24, 0x31	; 49
     610:	9d e0       	ldi	r25, 0x0D	; 13
     612:	f7 01       	movw	r30, r14
     614:	80 8f       	std	Z+24, r24	; 0x18
     616:	91 8f       	std	Z+25, r25	; 0x19
     618:	12 8e       	std	Z+26, r1	; 0x1a
     61a:	57 c0       	rjmp	.+174    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
			} else {
			//snprintf(global_txBuf+1, TX_LEN-1, "0 %.2f %.2f\r", global_gascal_o2, global_gascal_co2); // debug
			snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "0\r");
     61c:	80 e3       	ldi	r24, 0x30	; 48
     61e:	9d e0       	ldi	r25, 0x0D	; 13
     620:	f7 01       	movw	r30, r14
     622:	80 8f       	std	Z+24, r24	; 0x18
     624:	91 8f       	std	Z+25, r25	; 0x19
     626:	12 8e       	std	Z+26, r1	; 0x1a
     628:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     62c:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     630:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     634:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     638:	83 83       	std	Z+3, r24	; 0x03
     63a:	94 83       	std	Z+4, r25	; 0x04
     63c:	a5 83       	std	Z+5, r26	; 0x05
     63e:	b6 83       	std	Z+6, r27	; 0x06
			state = GASCAL;
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	80 83       	st	Z, r24
     644:	42 c0       	rjmp	.+132    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		break;
		
		case CHANGE_START_VVM:
		responseBuf[0] = '\0';
     646:	17 8a       	std	Z+23, r1	; 0x17
		if (state == IDLE)
     648:	80 81       	ld	r24, Z
     64a:	81 11       	cpse	r24, r1
     64c:	15 c0       	rjmp	.+42     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
		{
			//snprintf(global_txBuf+1, TX_LEN-1, "0\r");
			sampleIndex = 0;
     64e:	11 82       	std	Z+1, r1	; 0x01
     650:	12 82       	std	Z+2, r1	; 0x02
     652:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     656:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     65a:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     65e:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     662:	83 83       	std	Z+3, r24	; 0x03
     664:	94 83       	std	Z+4, r25	; 0x04
     666:	a5 83       	std	Z+5, r26	; 0x05
     668:	b6 83       	std	Z+6, r27	; 0x06
			timeFlag2 = timeFlag1;
     66a:	87 83       	std	Z+7, r24	; 0x07
     66c:	90 87       	std	Z+8, r25	; 0x08
     66e:	a1 87       	std	Z+9, r26	; 0x09
     670:	b2 87       	std	Z+10, r27	; 0x0a
			state = VVM;
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	80 83       	st	Z, r24
     676:	29 c0       	rjmp	.+82     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     678:	81 e3       	ldi	r24, 0x31	; 49
     67a:	9d e0       	ldi	r25, 0x0D	; 13
     67c:	80 8f       	std	Z+24, r24	; 0x18
     67e:	91 8f       	std	Z+25, r25	; 0x19
     680:	12 8e       	std	Z+26, r1	; 0x1a
     682:	23 c0       	rjmp	.+70     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		break;
		
		case CHANGE_TO_VVM:
		responseBuf[0] = c + 0x10;
     684:	89 ed       	ldi	r24, 0xD9	; 217
     686:	87 8b       	std	Z+23, r24	; 0x17
		if (state == IDLE)
     688:	80 81       	ld	r24, Z
     68a:	81 11       	cpse	r24, r1
     68c:	13 c0       	rjmp	.+38     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
		{
			snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "0\r");
     68e:	80 e3       	ldi	r24, 0x30	; 48
     690:	9d e0       	ldi	r25, 0x0D	; 13
     692:	80 8f       	std	Z+24, r24	; 0x18
     694:	91 8f       	std	Z+25, r25	; 0x19
     696:	12 8e       	std	Z+26, r1	; 0x1a
     698:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     69c:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     6a0:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     6a4:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag1 = myTimer0->getTime_s();
     6a8:	83 83       	std	Z+3, r24	; 0x03
     6aa:	94 83       	std	Z+4, r25	; 0x04
     6ac:	a5 83       	std	Z+5, r26	; 0x05
     6ae:	b6 83       	std	Z+6, r27	; 0x06
			state = IDLE;
     6b0:	10 82       	st	Z, r1
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		}
		else snprintf(responseBuf+1, COMHANDLER_BUFLEN-1, "1\r");
     6b4:	81 e3       	ldi	r24, 0x31	; 49
     6b6:	9d e0       	ldi	r25, 0x0D	; 13
     6b8:	80 8f       	std	Z+24, r24	; 0x18
     6ba:	91 8f       	std	Z+25, r25	; 0x19
     6bc:	12 8e       	std	Z+26, r1	; 0x1a
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
		break;
		
		default:
		responseBuf[0] = UNKNOWN_COMMAND;
     6c0:	80 ee       	ldi	r24, 0xE0	; 224
     6c2:	87 8b       	std	Z+23, r24	; 0x17
		responseBuf[1] = '\r';
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	80 8f       	std	Z+24, r24	; 0x18
		responseBuf[2] = '\0';
     6c8:	11 8e       	std	Z+25, r1	; 0x19
		break;
	}
}
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	af 90       	pop	r10
     6e2:	9f 90       	pop	r9
     6e4:	8f 90       	pop	r8
     6e6:	7f 90       	pop	r7
     6e8:	6f 90       	pop	r6
     6ea:	5f 90       	pop	r5
     6ec:	4f 90       	pop	r4
     6ee:	08 95       	ret

000006f0 <_ZN10ComHandler6handleEc>:
	this->myTimer0 = myTimer0;
	this->myUsart0 = myUsart0;
}

char* ComHandler::handle(char c)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
	if ((c >> 4) == 0x0A) questionHandler((question_e)c); // Questions commands
     6f6:	86 2f       	mov	r24, r22
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	95 95       	asr	r25
     6fc:	87 95       	ror	r24
     6fe:	95 95       	asr	r25
     700:	87 95       	ror	r24
     702:	95 95       	asr	r25
     704:	87 95       	ror	r24
     706:	95 95       	asr	r25
     708:	87 95       	ror	r24
     70a:	8a 30       	cpi	r24, 0x0A	; 10
     70c:	91 05       	cpc	r25, r1
     70e:	21 f4       	brne	.+8      	; 0x718 <_ZN10ComHandler6handleEc+0x28>
     710:	ce 01       	movw	r24, r28
     712:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN10ComHandler15questionHandlerENS_10question_eE>
     716:	0d c0       	rjmp	.+26     	; 0x732 <_ZN10ComHandler6handleEc+0x42>
	else if ((c >> 4) == 0x0C) changeHandler((change_e)c); // Change states
     718:	0c 97       	sbiw	r24, 0x0c	; 12
     71a:	21 f4       	brne	.+8      	; 0x724 <_ZN10ComHandler6handleEc+0x34>
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN10ComHandler13changeHandlerENS_8change_eE>
     722:	07 c0       	rjmp	.+14     	; 0x732 <_ZN10ComHandler6handleEc+0x42>
	else if (c == '\r') ; // ignore
     724:	6d 30       	cpi	r22, 0x0D	; 13
     726:	29 f0       	breq	.+10     	; 0x732 <_ZN10ComHandler6handleEc+0x42>
	else {
		responseBuf[0] = UNKNOWN_COMMAND;
     728:	80 ee       	ldi	r24, 0xE0	; 224
     72a:	8f 8b       	std	Y+23, r24	; 0x17
		responseBuf[1] = '\r';
     72c:	8d e0       	ldi	r24, 0x0D	; 13
     72e:	88 8f       	std	Y+24, r24	; 0x18
		responseBuf[2] = '\0';
     730:	19 8e       	std	Y+25, r1	; 0x19
	}
	return responseBuf;
}
     732:	ce 01       	movw	r24, r28
     734:	47 96       	adiw	r24, 0x17	; 23
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <_ZN10ComHandler6updateEv>:
		break;
	}
}

void ComHandler::update()
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
	switch (state)
     742:	88 81       	ld	r24, Y
     744:	83 30       	cpi	r24, 0x03	; 3
     746:	09 f4       	brne	.+2      	; 0x74a <_ZN10ComHandler6updateEv+0xe>
     748:	52 c0       	rjmp	.+164    	; 0x7ee <_ZN10ComHandler6updateEv+0xb2>
     74a:	28 f4       	brcc	.+10     	; 0x756 <_ZN10ComHandler6updateEv+0x1a>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	51 f0       	breq	.+20     	; 0x764 <_ZN10ComHandler6updateEv+0x28>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	51 f1       	breq	.+84     	; 0x7a8 <_ZN10ComHandler6updateEv+0x6c>
     754:	73 c1       	rjmp	.+742    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     756:	84 30       	cpi	r24, 0x04	; 4
     758:	09 f4       	brne	.+2      	; 0x75c <_ZN10ComHandler6updateEv+0x20>
     75a:	6c c0       	rjmp	.+216    	; 0x834 <_ZN10ComHandler6updateEv+0xf8>
     75c:	85 30       	cpi	r24, 0x05	; 5
     75e:	09 f4       	brne	.+2      	; 0x762 <_ZN10ComHandler6updateEv+0x26>
     760:	ec c0       	rjmp	.+472    	; 0x93a <_ZN10ComHandler6updateEv+0x1fe>
     762:	6c c1       	rjmp	.+728    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     764:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     768:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     76c:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     770:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		case IDLE:
		default:
		break;
		
		case HEATING:
		if (myTimer0->getTime_s() - timeFlag1 > HEATING_DURATION_s)
     774:	2b 81       	ldd	r18, Y+3	; 0x03
     776:	3c 81       	ldd	r19, Y+4	; 0x04
     778:	4d 81       	ldd	r20, Y+5	; 0x05
     77a:	5e 81       	ldd	r21, Y+6	; 0x06
     77c:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	a9 01       	movw	r20, r18
     786:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     78a:	18 16       	cp	r1, r24
     78c:	0c f0       	brlt	.+2      	; 0x790 <_ZN10ComHandler6updateEv+0x54>
     78e:	56 c1       	rjmp	.+684    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
		{
			state = IDLE;
     790:	18 82       	st	Y, r1
			myUsart0->sendChar(CHANGED_TO_IDLE);
     792:	61 ef       	ldi	r22, 0xF1	; 241
     794:	8d 89       	ldd	r24, Y+21	; 0x15
     796:	9e 89       	ldd	r25, Y+22	; 0x16
     798:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			myUsart0->sendChar('\r');
     79c:	6d e0       	ldi	r22, 0x0D	; 13
     79e:	8d 89       	ldd	r24, Y+21	; 0x15
     7a0:	9e 89       	ldd	r25, Y+22	; 0x16
     7a2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     7a6:	4a c1       	rjmp	.+660    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     7a8:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     7ac:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     7b0:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     7b4:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		}
		break;
		
		case AUTOCAL:
		if (myTimer0->getTime_s() - timeFlag1 > AUTOCAL_DURATION_s)
     7b8:	2b 81       	ldd	r18, Y+3	; 0x03
     7ba:	3c 81       	ldd	r19, Y+4	; 0x04
     7bc:	4d 81       	ldd	r20, Y+5	; 0x05
     7be:	5e 81       	ldd	r21, Y+6	; 0x06
     7c0:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e2       	ldi	r20, 0x20	; 32
     7ca:	51 e4       	ldi	r21, 0x41	; 65
     7cc:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     7d0:	18 16       	cp	r1, r24
     7d2:	0c f0       	brlt	.+2      	; 0x7d6 <_ZN10ComHandler6updateEv+0x9a>
     7d4:	33 c1       	rjmp	.+614    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
		{
			state = IDLE;
     7d6:	18 82       	st	Y, r1
			myUsart0->sendChar(CHANGED_TO_IDLE);
     7d8:	61 ef       	ldi	r22, 0xF1	; 241
     7da:	8d 89       	ldd	r24, Y+21	; 0x15
     7dc:	9e 89       	ldd	r25, Y+22	; 0x16
     7de:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			myUsart0->sendChar('\r');
     7e2:	6d e0       	ldi	r22, 0x0D	; 13
     7e4:	8d 89       	ldd	r24, Y+21	; 0x15
     7e6:	9e 89       	ldd	r25, Y+22	; 0x16
     7e8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     7ec:	27 c1       	rjmp	.+590    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     7ee:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     7f2:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     7f6:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     7fa:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		}
		break;
		
		case GASCAL:
		if (myTimer0->getTime_s() - timeFlag1 > GASCAL_DURATION_s)
     7fe:	2b 81       	ldd	r18, Y+3	; 0x03
     800:	3c 81       	ldd	r19, Y+4	; 0x04
     802:	4d 81       	ldd	r20, Y+5	; 0x05
     804:	5e 81       	ldd	r21, Y+6	; 0x06
     806:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e2       	ldi	r20, 0x20	; 32
     810:	51 e4       	ldi	r21, 0x41	; 65
     812:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     816:	18 16       	cp	r1, r24
     818:	0c f0       	brlt	.+2      	; 0x81c <_ZN10ComHandler6updateEv+0xe0>
     81a:	10 c1       	rjmp	.+544    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
		{
			state = IDLE;
     81c:	18 82       	st	Y, r1
			myUsart0->sendChar(CHANGED_TO_IDLE);
     81e:	61 ef       	ldi	r22, 0xF1	; 241
     820:	8d 89       	ldd	r24, Y+21	; 0x15
     822:	9e 89       	ldd	r25, Y+22	; 0x16
     824:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			myUsart0->sendChar('\r');
     828:	6d e0       	ldi	r22, 0x0D	; 13
     82a:	8d 89       	ldd	r24, Y+21	; 0x15
     82c:	9e 89       	ldd	r25, Y+22	; 0x16
     82e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     832:	04 c1       	rjmp	.+520    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     834:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     838:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     83c:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     840:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		}
		break;
		
		case DATA_SAMPLE:
		if (myTimer0->getTime_s() - timeFlag1 > DATA_SAMPLE_DURATION_s)
     844:	2b 81       	ldd	r18, Y+3	; 0x03
     846:	3c 81       	ldd	r19, Y+4	; 0x04
     848:	4d 81       	ldd	r20, Y+5	; 0x05
     84a:	5e 81       	ldd	r21, Y+6	; 0x06
     84c:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	46 e1       	ldi	r20, 0x16	; 22
     856:	53 e4       	ldi	r21, 0x43	; 67
     858:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     85c:	18 16       	cp	r1, r24
     85e:	44 f5       	brge	.+80     	; 0x8b0 <_ZN10ComHandler6updateEv+0x174>
		{
			if(sampleIndex >= 0 && sampleIndex < NUM_OF_SAMPLES)
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	4e 97       	sbiw	r24, 0x1e	; 30
     866:	c0 f4       	brcc	.+48     	; 0x898 <_ZN10ComHandler6updateEv+0x15c>
			{
				myUsart0->sendChar(0x03);
     868:	63 e0       	ldi	r22, 0x03	; 3
     86a:	8d 89       	ldd	r24, Y+21	; 0x15
     86c:	9e 89       	ldd	r25, Y+22	; 0x16
     86e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
				myUsart0->sendString(SAMPLE[sampleIndex]);
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	9a 81       	ldd	r25, Y+2	; 0x02
     876:	2a e2       	ldi	r18, 0x2A	; 42
     878:	28 9f       	mul	r18, r24
     87a:	b0 01       	movw	r22, r0
     87c:	29 9f       	mul	r18, r25
     87e:	70 0d       	add	r23, r0
     880:	11 24       	eor	r1, r1
     882:	62 5b       	subi	r22, 0xB2	; 178
     884:	7f 4d       	sbci	r23, 0xDF	; 223
     886:	8d 89       	ldd	r24, Y+21	; 0x15
     888:	9e 89       	ldd	r25, Y+22	; 0x16
     88a:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
				myUsart0->sendChar('\r');
     88e:	6d e0       	ldi	r22, 0x0D	; 13
     890:	8d 89       	ldd	r24, Y+21	; 0x15
     892:	9e 89       	ldd	r25, Y+22	; 0x16
     894:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			}
			state = IDLE;
     898:	18 82       	st	Y, r1
			myUsart0->sendChar(CHANGED_TO_IDLE);
     89a:	61 ef       	ldi	r22, 0xF1	; 241
     89c:	8d 89       	ldd	r24, Y+21	; 0x15
     89e:	9e 89       	ldd	r25, Y+22	; 0x16
     8a0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			myUsart0->sendChar('\r');
     8a4:	6d e0       	ldi	r22, 0x0D	; 13
     8a6:	8d 89       	ldd	r24, Y+21	; 0x15
     8a8:	9e 89       	ldd	r25, Y+22	; 0x16
     8aa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     8ae:	c6 c0       	rjmp	.+396    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     8b0:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     8b4:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     8b8:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     8bc:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			
		}
		else if (myTimer0->getTime_s() - timeFlag2 > DATA_SAMPLE_PERIOD_s)
     8c0:	2f 81       	ldd	r18, Y+7	; 0x07
     8c2:	38 85       	ldd	r19, Y+8	; 0x08
     8c4:	49 85       	ldd	r20, Y+9	; 0x09
     8c6:	5a 85       	ldd	r21, Y+10	; 0x0a
     8c8:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 ea       	ldi	r20, 0xA0	; 160
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	0c f0       	brlt	.+2      	; 0x8de <_ZN10ComHandler6updateEv+0x1a2>
     8dc:	af c0       	rjmp	.+350    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
		{
			if(sampleIndex >= 0 && sampleIndex < NUM_OF_SAMPLES)
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	4e 97       	sbiw	r24, 0x1e	; 30
     8e4:	c0 f4       	brcc	.+48     	; 0x916 <_ZN10ComHandler6updateEv+0x1da>
			{
				myUsart0->sendChar(0x03);
     8e6:	63 e0       	ldi	r22, 0x03	; 3
     8e8:	8d 89       	ldd	r24, Y+21	; 0x15
     8ea:	9e 89       	ldd	r25, Y+22	; 0x16
     8ec:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
				myUsart0->sendString(SAMPLE[sampleIndex]);
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	2a e2       	ldi	r18, 0x2A	; 42
     8f6:	28 9f       	mul	r18, r24
     8f8:	b0 01       	movw	r22, r0
     8fa:	29 9f       	mul	r18, r25
     8fc:	70 0d       	add	r23, r0
     8fe:	11 24       	eor	r1, r1
     900:	62 5b       	subi	r22, 0xB2	; 178
     902:	7f 4d       	sbci	r23, 0xDF	; 223
     904:	8d 89       	ldd	r24, Y+21	; 0x15
     906:	9e 89       	ldd	r25, Y+22	; 0x16
     908:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
				myUsart0->sendChar('\r');
     90c:	6d e0       	ldi	r22, 0x0D	; 13
     90e:	8d 89       	ldd	r24, Y+21	; 0x15
     910:	9e 89       	ldd	r25, Y+22	; 0x16
     912:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			}
			sampleIndex += 1;
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     924:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     928:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     92c:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag2 = myTimer0->getTime_s();
     930:	8f 83       	std	Y+7, r24	; 0x07
     932:	98 87       	std	Y+8, r25	; 0x08
     934:	a9 87       	std	Y+9, r26	; 0x09
     936:	ba 87       	std	Y+10, r27	; 0x0a
     938:	81 c0       	rjmp	.+258    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     93a:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     93e:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     942:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     946:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		}
		break;
		
		case VVM:
		if (myTimer0->getTime_s() - timeFlag1 > VVM_DURATION_s)
     94a:	2b 81       	ldd	r18, Y+3	; 0x03
     94c:	3c 81       	ldd	r19, Y+4	; 0x04
     94e:	4d 81       	ldd	r20, Y+5	; 0x05
     950:	5e 81       	ldd	r21, Y+6	; 0x06
     952:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e4       	ldi	r20, 0x40	; 64
     95c:	51 e4       	ldi	r21, 0x41	; 65
     95e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     962:	18 16       	cp	r1, r24
     964:	44 f5       	brge	.+80     	; 0x9b6 <_ZN10ComHandler6updateEv+0x27a>
		{
			if(sampleIndex >= 0 && sampleIndex < NUM_OF_SAMPLES_VVM)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	06 97       	sbiw	r24, 0x06	; 6
     96c:	c0 f4       	brcc	.+48     	; 0x99e <_ZN10ComHandler6updateEv+0x262>
			{
				myUsart0->sendChar(0x02);
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	8d 89       	ldd	r24, Y+21	; 0x15
     972:	9e 89       	ldd	r25, Y+22	; 0x16
     974:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
				myUsart0->sendString(VVM_SAMPLE[sampleIndex]);
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	2d e0       	ldi	r18, 0x0D	; 13
     97e:	28 9f       	mul	r18, r24
     980:	b0 01       	movw	r22, r0
     982:	29 9f       	mul	r18, r25
     984:	70 0d       	add	r23, r0
     986:	11 24       	eor	r1, r1
     988:	60 50       	subi	r22, 0x00	; 0
     98a:	70 4e       	sbci	r23, 0xE0	; 224
     98c:	8d 89       	ldd	r24, Y+21	; 0x15
     98e:	9e 89       	ldd	r25, Y+22	; 0x16
     990:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
				myUsart0->sendChar('\r');
     994:	6d e0       	ldi	r22, 0x0D	; 13
     996:	8d 89       	ldd	r24, Y+21	; 0x15
     998:	9e 89       	ldd	r25, Y+22	; 0x16
     99a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			}
			state = IDLE;
     99e:	18 82       	st	Y, r1
			myUsart0->sendChar(CHANGED_TO_IDLEVVM);
     9a0:	69 ef       	ldi	r22, 0xF9	; 249
     9a2:	8d 89       	ldd	r24, Y+21	; 0x15
     9a4:	9e 89       	ldd	r25, Y+22	; 0x16
     9a6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
			myUsart0->sendChar('\r');
     9aa:	6d e0       	ldi	r22, 0x0D	; 13
     9ac:	8d 89       	ldd	r24, Y+21	; 0x15
     9ae:	9e 89       	ldd	r25, Y+22	; 0x16
     9b0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
     9b6:	60 91 a7 25 	lds	r22, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     9ba:	70 91 a8 25 	lds	r23, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     9be:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     9c2:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
		}
		else if (myTimer0->getTime_s() - timeFlag2 > VVM_PERIOD_s)
     9c6:	2f 81       	ldd	r18, Y+7	; 0x07
     9c8:	38 85       	ldd	r19, Y+8	; 0x08
     9ca:	49 85       	ldd	r20, Y+9	; 0x09
     9cc:	5a 85       	ldd	r21, Y+10	; 0x0a
     9ce:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e4       	ldi	r21, 0x40	; 64
     9da:	0e 94 2b 08 	call	0x1056	; 0x1056 <__gesf2>
     9de:	18 16       	cp	r1, r24
     9e0:	6c f5       	brge	.+90     	; 0xa3c <_ZN10ComHandler6updateEv+0x300>
		{
			if(sampleIndex >= 0 && sampleIndex < NUM_OF_SAMPLES_VVM)
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	06 97       	sbiw	r24, 0x06	; 6
     9e8:	c0 f4       	brcc	.+48     	; 0xa1a <_ZN10ComHandler6updateEv+0x2de>
			{
				myUsart0->sendChar(0x02);
     9ea:	62 e0       	ldi	r22, 0x02	; 2
     9ec:	8d 89       	ldd	r24, Y+21	; 0x15
     9ee:	9e 89       	ldd	r25, Y+22	; 0x16
     9f0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
				myUsart0->sendString(VVM_SAMPLE[sampleIndex]);
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	2d e0       	ldi	r18, 0x0D	; 13
     9fa:	28 9f       	mul	r18, r24
     9fc:	b0 01       	movw	r22, r0
     9fe:	29 9f       	mul	r18, r25
     a00:	70 0d       	add	r23, r0
     a02:	11 24       	eor	r1, r1
     a04:	60 50       	subi	r22, 0x00	; 0
     a06:	70 4e       	sbci	r23, 0xE0	; 224
     a08:	8d 89       	ldd	r24, Y+21	; 0x15
     a0a:	9e 89       	ldd	r25, Y+22	; 0x16
     a0c:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
				myUsart0->sendChar('\r');
     a10:	6d e0       	ldi	r22, 0x0D	; 13
     a12:	8d 89       	ldd	r24, Y+21	; 0x15
     a14:	9e 89       	ldd	r25, Y+22	; 0x16
     a16:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
				
			}
			sampleIndex += 1;
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     a28:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     a2c:	a0 91 a9 25 	lds	r26, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     a30:	b0 91 aa 25 	lds	r27, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
			timeFlag2 = myTimer0->getTime_s();
     a34:	8f 83       	std	Y+7, r24	; 0x07
     a36:	98 87       	std	Y+8, r25	; 0x08
     a38:	a9 87       	std	Y+9, r26	; 0x09
     a3a:	ba 87       	std	Y+10, r27	; 0x0a
		}
		break;
	}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <__vector_14>:
volatile double Tcc0::time_s = 0;
volatile double Tcc0::timeIncrement_s = 0;
volatile bool Tcc0::ovfFlag = false;

ISR(TCC0_OVF_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	08 b6       	in	r0, 0x38	; 56
     a4e:	0f 92       	push	r0
     a50:	18 be       	out	0x38, r1	; 56
     a52:	09 b6       	in	r0, 0x39	; 57
     a54:	0f 92       	push	r0
     a56:	19 be       	out	0x39, r1	; 57
     a58:	0b b6       	in	r0, 0x3b	; 59
     a5a:	0f 92       	push	r0
     a5c:	1b be       	out	0x3b, r1	; 59
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
	Tcc0::time_s += Tcc0::timeIncrement_s;
     a76:	60 91 a3 25 	lds	r22, 0x25A3	; 0x8025a3 <_ZN4Tcc015timeIncrement_sE>
     a7a:	70 91 a4 25 	lds	r23, 0x25A4	; 0x8025a4 <_ZN4Tcc015timeIncrement_sE+0x1>
     a7e:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <_ZN4Tcc015timeIncrement_sE+0x2>
     a82:	90 91 a6 25 	lds	r25, 0x25A6	; 0x8025a6 <_ZN4Tcc015timeIncrement_sE+0x3>
     a86:	20 91 a7 25 	lds	r18, 0x25A7	; 0x8025a7 <_ZN4Tcc06time_sE>
     a8a:	30 91 a8 25 	lds	r19, 0x25A8	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     a8e:	40 91 a9 25 	lds	r20, 0x25A9	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     a92:	50 91 aa 25 	lds	r21, 0x25AA	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
     a96:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     a9a:	60 93 a7 25 	sts	0x25A7, r22	; 0x8025a7 <_ZN4Tcc06time_sE>
     a9e:	70 93 a8 25 	sts	0x25A8, r23	; 0x8025a8 <_ZN4Tcc06time_sE+0x1>
     aa2:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <_ZN4Tcc06time_sE+0x2>
     aa6:	90 93 aa 25 	sts	0x25AA, r25	; 0x8025aa <_ZN4Tcc06time_sE+0x3>
	Tcc0::ovfFlag = true;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	80 93 a2 25 	sts	0x25A2, r24	; 0x8025a2 <__data_end>
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	09 be       	out	0x39, r0	; 57
     ad0:	0f 90       	pop	r0
     ad2:	08 be       	out	0x38, r0	; 56
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <_ZN4Tcc0C1EN3Tcc7clock_sEN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Tcc0::Tcc0(Tcc::clock_s c, Utils::interruptLevel_e ovfil)
     ade:	0f 93       	push	r16
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	25 97       	sbiw	r28, 0x05	; 5
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	29 83       	std	Y+1, r18	; 0x01
     af0:	3a 83       	std	Y+2, r19	; 0x02
     af2:	4b 83       	std	Y+3, r20	; 0x03
     af4:	5c 83       	std	Y+4, r21	; 0x04
     af6:	6d 83       	std	Y+5, r22	; 0x05
{
	TCC0_CTRLA = c.clock;
     af8:	20 93 00 08 	sts	0x0800, r18	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	timeIncrement_s = c.ti;
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	9b 81       	ldd	r25, Y+3	; 0x03
     b00:	ac 81       	ldd	r26, Y+4	; 0x04
     b02:	bd 81       	ldd	r27, Y+5	; 0x05
     b04:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <_ZN4Tcc015timeIncrement_sE>
     b08:	90 93 a4 25 	sts	0x25A4, r25	; 0x8025a4 <_ZN4Tcc015timeIncrement_sE+0x1>
     b0c:	a0 93 a5 25 	sts	0x25A5, r26	; 0x8025a5 <_ZN4Tcc015timeIncrement_sE+0x2>
     b10:	b0 93 a6 25 	sts	0x25A6, r27	; 0x8025a6 <_ZN4Tcc015timeIncrement_sE+0x3>
	TCC0_INTCTRLA |= (ovfil << TC0_OVFINTLVL_gp);
     b14:	e6 e0       	ldi	r30, 0x06	; 6
     b16:	f8 e0       	ldi	r31, 0x08	; 8
     b18:	80 81       	ld	r24, Z
     b1a:	08 2b       	or	r16, r24
     b1c:	00 83       	st	Z, r16
}
     b1e:	25 96       	adiw	r28, 0x05	; 5
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <__vector_28>:

volatile bool UsartC1::rxcFlag = false;
volatile bool UsartC1::txcFlag = false;
volatile bool UsartC1::dreFlag = false;

ISR(USARTC1_RXC_vect) {UsartC1::rxcFlag = true;}
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	08 b6       	in	r0, 0x38	; 56
     b38:	0f 92       	push	r0
     b3a:	18 be       	out	0x38, r1	; 56
     b3c:	8f 93       	push	r24
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 ad 25 	sts	0x25AD, r24	; 0x8025ad <_ZN7UsartC17rxcFlagE>
     b44:	8f 91       	pop	r24
     b46:	0f 90       	pop	r0
     b48:	08 be       	out	0x38, r0	; 56
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_30>:
ISR(USARTC1_TXC_vect) {UsartC1::txcFlag = true;}
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	08 b6       	in	r0, 0x38	; 56
     b60:	0f 92       	push	r0
     b62:	18 be       	out	0x38, r1	; 56
     b64:	8f 93       	push	r24
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <_ZN7UsartC17txcFlagE>
     b6c:	8f 91       	pop	r24
     b6e:	0f 90       	pop	r0
     b70:	08 be       	out	0x38, r0	; 56
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_29>:
ISR(USARTC1_DRE_vect) {UsartC1::dreFlag = true;}
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	08 b6       	in	r0, 0x38	; 56
     b88:	0f 92       	push	r0
     b8a:	18 be       	out	0x38, r1	; 56
     b8c:	8f 93       	push	r24
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <_ZN7UsartC17dreFlagE>
     b94:	8f 91       	pop	r24
     b96:	0f 90       	pop	r0
     b98:	08 be       	out	0x38, r0	; 56
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

UsartC1::UsartC1(	Usart::baudrate_s baudrate,
     ba4:	ef 92       	push	r14
     ba6:	0f 93       	push	r16
					Utils::interruptLevel_e rxcil,
					Utils::interruptLevel_e txcil,
					Utils::interruptLevel_e dreil)
{
	USARTC1_BAUDCTRLA = baudrate.bsel << USART_BSEL_gp;
     ba8:	40 93 b6 08 	sts	0x08B6, r20	; 0x8008b6 <__TEXT_REGION_LENGTH__+0x7008b6>
	USARTC1_BAUDCTRLB = baudrate.bscale << USART_BSCALE_gp;
     bac:	62 95       	swap	r22
     bae:	60 7f       	andi	r22, 0xF0	; 240
     bb0:	60 93 b7 08 	sts	0x08B7, r22	; 0x8008b7 <__TEXT_REGION_LENGTH__+0x7008b7>
	if (baudrate.clk2x) USARTC1_CTRLB |= USART_CLK2X_bm;
     bb4:	77 23       	and	r23, r23
     bb6:	29 f0       	breq	.+10     	; 0xbc2 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_+0x1e>
     bb8:	e4 eb       	ldi	r30, 0xB4	; 180
     bba:	f8 e0       	ldi	r31, 0x08	; 8
     bbc:	80 81       	ld	r24, Z
     bbe:	84 60       	ori	r24, 0x04	; 4
     bc0:	80 83       	st	Z, r24
	USARTC1_CTRLB |= USART_RXEN_bm|USART_TXEN_bm;
     bc2:	e4 eb       	ldi	r30, 0xB4	; 180
     bc4:	f8 e0       	ldi	r31, 0x08	; 8
     bc6:	80 81       	ld	r24, Z
     bc8:	88 61       	ori	r24, 0x18	; 24
     bca:	80 83       	st	Z, r24
	USARTC1_CTRLA = (rxcil << USART_RXCINTLVL_gp)|(txcil << USART_TXCINTLVL_gp)|(dreil << USART_DREINTLVL_gp);
     bcc:	00 0f       	add	r16, r16
     bce:	00 0f       	add	r16, r16
     bd0:	e0 2a       	or	r14, r16
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	28 9f       	mul	r18, r24
     bd6:	90 01       	movw	r18, r0
     bd8:	11 24       	eor	r1, r1
     bda:	2e 29       	or	r18, r14
     bdc:	20 93 b3 08 	sts	0x08B3, r18	; 0x8008b3 <__TEXT_REGION_LENGTH__+0x7008b3>
	PORTC_DIRSET = PIN7_bm;
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
}
     be6:	0f 91       	pop	r16
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <_ZN7UsartC17getCharEv>:
//=== FUNCTIONS ===//
//=================//

char UsartC1::getChar()
{
	return USARTC1_DATA;
     bec:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
}
     bf0:	08 95       	ret

00000bf2 <_ZN7UsartC18sendCharEc>:

void UsartC1::sendChar(char c)
{
	while (!(USARTC1_STATUS & USART_DREIF_bm)) ;
     bf2:	e1 eb       	ldi	r30, 0xB1	; 177
     bf4:	f8 e0       	ldi	r31, 0x08	; 8
     bf6:	80 81       	ld	r24, Z
     bf8:	85 ff       	sbrs	r24, 5
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <_ZN7UsartC18sendCharEc+0x4>
	USARTC1_DATA = c;
     bfc:	60 93 b0 08 	sts	0x08B0, r22	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
     c00:	08 95       	ret

00000c02 <_ZN7UsartC110sendStringEPKc>:
}

void UsartC1::sendString(const char* str)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	eb 01       	movw	r28, r22
	int i = 0;
	while (str[i] != '\0') sendChar(str[i++]);
     c0c:	68 81       	ld	r22, Y
     c0e:	66 23       	and	r22, r22
     c10:	41 f0       	breq	.+16     	; 0xc22 <_ZN7UsartC110sendStringEPKc+0x20>
     c12:	8c 01       	movw	r16, r24
     c14:	21 96       	adiw	r28, 0x01	; 1
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7UsartC18sendCharEc>
     c1c:	69 91       	ld	r22, Y+
     c1e:	61 11       	cpse	r22, r1
     c20:	fa cf       	rjmp	.-12     	; 0xc16 <_ZN7UsartC110sendStringEPKc+0x14>
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <__vector_58>:

volatile bool UsartE0::rxcFlag = false;
volatile bool UsartE0::txcFlag = false;
volatile bool UsartE0::dreFlag = false;

ISR(USARTE0_RXC_vect) {UsartE0::rxcFlag = true;}
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	08 b6       	in	r0, 0x38	; 56
     c38:	0f 92       	push	r0
     c3a:	18 be       	out	0x38, r1	; 56
     c3c:	8f 93       	push	r24
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 b0 25 	sts	0x25B0, r24	; 0x8025b0 <_ZN7UsartE07rxcFlagE>
     c44:	8f 91       	pop	r24
     c46:	0f 90       	pop	r0
     c48:	08 be       	out	0x38, r0	; 56
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_60>:
ISR(USARTE0_TXC_vect) {UsartE0::txcFlag = true;}
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	08 b6       	in	r0, 0x38	; 56
     c60:	0f 92       	push	r0
     c62:	18 be       	out	0x38, r1	; 56
     c64:	8f 93       	push	r24
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 af 25 	sts	0x25AF, r24	; 0x8025af <_ZN7UsartE07txcFlagE>
     c6c:	8f 91       	pop	r24
     c6e:	0f 90       	pop	r0
     c70:	08 be       	out	0x38, r0	; 56
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_59>:
ISR(USARTE0_DRE_vect) {UsartE0::dreFlag = true;}
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	08 b6       	in	r0, 0x38	; 56
     c88:	0f 92       	push	r0
     c8a:	18 be       	out	0x38, r1	; 56
     c8c:	8f 93       	push	r24
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 ae 25 	sts	0x25AE, r24	; 0x8025ae <_ZN7UsartE07dreFlagE>
     c94:	8f 91       	pop	r24
     c96:	0f 90       	pop	r0
     c98:	08 be       	out	0x38, r0	; 56
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

UsartE0::UsartE0(	Usart::baudrate_s baudrate,
     ca4:	ef 92       	push	r14
     ca6:	0f 93       	push	r16
					Utils::interruptLevel_e rxcil,
					Utils::interruptLevel_e txcil,
					Utils::interruptLevel_e dreil)
{
	USARTE0_BAUDCTRLA = baudrate.bsel << USART_BSEL_gp;
     ca8:	40 93 a6 0a 	sts	0x0AA6, r20	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
	USARTE0_BAUDCTRLB = baudrate.bscale << USART_BSCALE_gp;
     cac:	62 95       	swap	r22
     cae:	60 7f       	andi	r22, 0xF0	; 240
     cb0:	60 93 a7 0a 	sts	0x0AA7, r22	; 0x800aa7 <__TEXT_REGION_LENGTH__+0x700aa7>
	if (baudrate.clk2x) USARTE0_CTRLB |= USART_CLK2X_bm;
     cb4:	77 23       	and	r23, r23
     cb6:	29 f0       	breq	.+10     	; 0xcc2 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_+0x1e>
     cb8:	e4 ea       	ldi	r30, 0xA4	; 164
     cba:	fa e0       	ldi	r31, 0x0A	; 10
     cbc:	80 81       	ld	r24, Z
     cbe:	84 60       	ori	r24, 0x04	; 4
     cc0:	80 83       	st	Z, r24
	USARTE0_CTRLB |= USART_RXEN_bm|USART_TXEN_bm;
     cc2:	e4 ea       	ldi	r30, 0xA4	; 164
     cc4:	fa e0       	ldi	r31, 0x0A	; 10
     cc6:	80 81       	ld	r24, Z
     cc8:	88 61       	ori	r24, 0x18	; 24
     cca:	80 83       	st	Z, r24
	USARTE0_CTRLA = (rxcil << USART_RXCINTLVL_gp)|(txcil << USART_TXCINTLVL_gp)|(dreil << USART_DREINTLVL_gp);
     ccc:	00 0f       	add	r16, r16
     cce:	00 0f       	add	r16, r16
     cd0:	e0 2a       	or	r14, r16
     cd2:	80 e1       	ldi	r24, 0x10	; 16
     cd4:	28 9f       	mul	r18, r24
     cd6:	90 01       	movw	r18, r0
     cd8:	11 24       	eor	r1, r1
     cda:	2e 29       	or	r18, r14
     cdc:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
	PORTE_DIRSET = PIN3_bm;
     ce0:	88 e0       	ldi	r24, 0x08	; 8
     ce2:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
}
     ce6:	0f 91       	pop	r16
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <_ZN7UsartE07getCharEv>:
//=== FUNCTIONS ===//
//=================//

char UsartE0::getChar()
{
	return USARTE0_DATA;
     cec:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
}
     cf0:	08 95       	ret

00000cf2 <_ZN7UsartE08sendCharEc>:

void UsartE0::sendChar(char c)
{
	while (!(USARTE0_STATUS & USART_DREIF_bm)) ;
     cf2:	e1 ea       	ldi	r30, 0xA1	; 161
     cf4:	fa e0       	ldi	r31, 0x0A	; 10
     cf6:	80 81       	ld	r24, Z
     cf8:	85 ff       	sbrs	r24, 5
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <_ZN7UsartE08sendCharEc+0x4>
	USARTE0_DATA = c;
     cfc:	60 93 a0 0a 	sts	0x0AA0, r22	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
     d00:	08 95       	ret

00000d02 <_ZN7UsartE010sendStringEPKc>:
}

void UsartE0::sendString(const char* str)
{
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	eb 01       	movw	r28, r22
	int i = 0;
	while (str[i] != '\0') sendChar(str[i++]);
     d0c:	68 81       	ld	r22, Y
     d0e:	66 23       	and	r22, r22
     d10:	41 f0       	breq	.+16     	; 0xd22 <_ZN7UsartE010sendStringEPKc+0x20>
     d12:	8c 01       	movw	r16, r24
     d14:	21 96       	adiw	r28, 0x01	; 1
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7UsartE08sendCharEc>
     d1c:	69 91       	ld	r22, Y+
     d1e:	61 11       	cpse	r22, r1
     d20:	fa cf       	rjmp	.-12     	; 0xd16 <_ZN7UsartE010sendStringEPKc+0x14>
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <_ZN5Utils14setSystemClockENS_13systemClock_eE>:
#include "Utils.h"

// enable oscillators and select system clock
void Utils::setSystemClock(systemClock_e sc)
{
	OSC_CTRL |= 1 << sc; // enable oscillator
     d2c:	e0 e5       	ldi	r30, 0x50	; 80
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	90 81       	ld	r25, Z
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	08 2e       	mov	r0, r24
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x12>
     d3a:	44 0f       	add	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <_ZN5Utils14setSystemClockENS_13systemClock_eE+0xe>
     d42:	94 2b       	or	r25, r20
     d44:	90 83       	st	Z, r25
	while (!(OSC_STATUS & (1 << sc))) ; // wait until oscillator is ready
     d46:	e1 e5       	ldi	r30, 0x51	; 81
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	20 81       	ld	r18, Z
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	24 23       	and	r18, r20
     d50:	35 23       	and	r19, r21
     d52:	23 2b       	or	r18, r19
     d54:	d1 f3       	breq	.-12     	; 0xd4a <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x1e>
	CCP = CCP_IOREG_gc; // trigger protection mechanism
     d56:	98 ed       	ldi	r25, 0xD8	; 216
     d58:	94 bf       	out	0x34, r25	; 52
	CLK_CTRL = sc << CLK_SCLKSEL_gp; // select system clock
     d5a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     d5e:	08 95       	ret

00000d60 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>:
}

void Utils::enableInterruptLevel(interruptLevel_e il)
{
	PMIC_CTRL |= (1 << (il-1));
     d60:	e2 ea       	ldi	r30, 0xA2	; 162
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	40 81       	ld	r20, Z
     d66:	81 50       	subi	r24, 0x01	; 1
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	b9 01       	movw	r22, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x14>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	8a 95       	dec	r24
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x10>
     d78:	cb 01       	movw	r24, r22
     d7a:	84 2b       	or	r24, r20
     d7c:	80 83       	st	Z, r24
     d7e:	08 95       	ret

00000d80 <_ZN5Utils21globalInterruptEnableEv>:
}

void Utils::globalInterruptEnable()
{
	CPU_SREG |= CPU_I_bm;
     d80:	8f b7       	in	r24, 0x3f	; 63
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	8f bf       	out	0x3f, r24	; 63
     d86:	08 95       	ret

00000d88 <main>:
//============//
//=== MAIN ===//
//============//

int main(void)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	ca 5a       	subi	r28, 0xAA	; 170
     d92:	d1 09       	sbc	r29, r1
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	de bf       	out	0x3e, r29	; 62
	Utils::setSystemClock(Utils::SC_32M); // 32MHz internal oscillator
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN5Utils14setSystemClockENS_13systemClock_eE>
	Tcc0 myTimer0(Tcc::CLOCK_DIV1024, Utils::HIGH); // initialize TCC0
     d9e:	03 e0       	ldi	r16, 0x03	; 3
     da0:	20 91 5a 25 	lds	r18, 0x255A	; 0x80255a <_ZN3Tcc13CLOCK_DIV1024E>
     da4:	30 91 5b 25 	lds	r19, 0x255B	; 0x80255b <_ZN3Tcc13CLOCK_DIV1024E+0x1>
     da8:	40 91 5c 25 	lds	r20, 0x255C	; 0x80255c <_ZN3Tcc13CLOCK_DIV1024E+0x2>
     dac:	50 91 5d 25 	lds	r21, 0x255D	; 0x80255d <_ZN3Tcc13CLOCK_DIV1024E+0x3>
     db0:	60 91 5e 25 	lds	r22, 0x255E	; 0x80255e <_ZN3Tcc13CLOCK_DIV1024E+0x4>
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 6f 05 	call	0xade	; 0xade <_ZN4Tcc0C1EN3Tcc7clock_sEN5Utils16interruptLevel_eE>
	UsartE0 myUsart0(Usart::BAUD_9k6, Utils::MEDIUM, Utils::OFF, Utils::OFF); // initialize USARTE0
     dbc:	80 91 9d 25 	lds	r24, 0x259D	; 0x80259d <_ZN5Usart8BAUD_9k6E>
     dc0:	90 91 9e 25 	lds	r25, 0x259E	; 0x80259e <_ZN5Usart8BAUD_9k6E+0x1>
     dc4:	a0 91 9f 25 	lds	r26, 0x259F	; 0x80259f <_ZN5Usart8BAUD_9k6E+0x2>
     dc8:	b0 91 a0 25 	lds	r27, 0x25A0	; 0x8025a0 <_ZN5Usart8BAUD_9k6E+0x3>
     dcc:	e1 2c       	mov	r14, r1
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	22 e0       	ldi	r18, 0x02	; 2
     dd2:	4c 01       	movw	r8, r24
     dd4:	5d 01       	movw	r10, r26
     dd6:	ac 01       	movw	r20, r24
     dd8:	bd 01       	movw	r22, r26
     dda:	ce 01       	movw	r24, r28
     ddc:	02 96       	adiw	r24, 0x02	; 2
     dde:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_>
	UsartC1 myUsart1(Usart::BAUD_9k6, Utils::MEDIUM, Utils::OFF, Utils::OFF); // initialize USARTC1
     de2:	22 e0       	ldi	r18, 0x02	; 2
     de4:	b5 01       	movw	r22, r10
     de6:	a4 01       	movw	r20, r8
     de8:	ce 01       	movw	r24, r28
     dea:	03 96       	adiw	r24, 0x03	; 3
     dec:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eES3_S3_>

	myUsart0.sendString("Hello World! This is USARTE0!\r"); // debug USARTE0
     df0:	6f e5       	ldi	r22, 0x5F	; 95
     df2:	75 e2       	ldi	r23, 0x25	; 37
     df4:	ce 01       	movw	r24, r28
     df6:	02 96       	adiw	r24, 0x02	; 2
     df8:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
	myUsart1.sendString("Hello World! This is USARTC1!\r"); // debug USARTC1
     dfc:	6e e7       	ldi	r22, 0x7E	; 126
     dfe:	75 e2       	ldi	r23, 0x25	; 37
     e00:	ce 01       	movw	r24, r28
     e02:	03 96       	adiw	r24, 0x03	; 3
     e04:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN7UsartC110sendStringEPKc>

	ComHandler myComHandler(&myTimer0, &myUsart0);
     e08:	ae 01       	movw	r20, r28
     e0a:	4e 5f       	subi	r20, 0xFE	; 254
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	be 01       	movw	r22, r28
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	ce 01       	movw	r24, r28
     e16:	04 96       	adiw	r24, 0x04	; 4
     e18:	0e 94 44 01 	call	0x288	; 0x288 <_ZN10ComHandlerC1EP4Tcc0P7UsartE0>

	Utils::enableInterruptLevel(Utils::HIGH); // enable high-priority interrupts
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::enableInterruptLevel(Utils::MEDIUM); // enable medium-priority interrupts
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::globalInterruptEnable();			 // enable interrupts globally
     e28:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN5Utils21globalInterruptEnableEv>
	
	static volatile bool rxcFlag;
	static volatile bool txcFlag;
	static volatile bool dreFlag;
	
	bool isRXC(){return rxcFlag;};
     e2c:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <_ZN7UsartE07rxcFlagE>
		
    while (true)
    {
		// echo USARTE0
		if (myUsart0.isRXC())
     e30:	88 23       	and	r24, r24
     e32:	81 f0       	breq	.+32     	; 0xe54 <main+0xcc>
		{
			unsigned char b = myUsart0.getChar();
     e34:	ce 01       	movw	r24, r28
     e36:	02 96       	adiw	r24, 0x02	; 2
     e38:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN7UsartE07getCharEv>
			myUsart0.sendString(myComHandler.handle(b)); // handle received command
     e3c:	68 2f       	mov	r22, r24
     e3e:	ce 01       	movw	r24, r28
     e40:	04 96       	adiw	r24, 0x04	; 4
     e42:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN10ComHandler6handleEc>
     e46:	bc 01       	movw	r22, r24
     e48:	ce 01       	movw	r24, r28
     e4a:	02 96       	adiw	r24, 0x02	; 2
     e4c:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN7UsartE010sendStringEPKc>
	bool isTXC(){return txcFlag;};
	bool isDRE(){return dreFlag;};
	
	void setRXC(bool b){rxcFlag = b;};
     e50:	10 92 b0 25 	sts	0x25B0, r1	; 0x8025b0 <_ZN7UsartE07rxcFlagE>
			myUsart0.setRXC(false);
		}
		
		// echo USARTC1
		if (UsartC1::rxcFlag)
     e54:	80 91 ad 25 	lds	r24, 0x25AD	; 0x8025ad <_ZN7UsartC17rxcFlagE>
     e58:	88 23       	and	r24, r24
     e5a:	59 f0       	breq	.+22     	; 0xe72 <main+0xea>
		{
			myUsart1.sendChar(myUsart1.getChar());
     e5c:	ce 01       	movw	r24, r28
     e5e:	03 96       	adiw	r24, 0x03	; 3
     e60:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN7UsartC17getCharEv>
     e64:	68 2f       	mov	r22, r24
     e66:	ce 01       	movw	r24, r28
     e68:	03 96       	adiw	r24, 0x03	; 3
     e6a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7UsartC18sendCharEc>
			UsartC1::rxcFlag = false;
     e6e:	10 92 ad 25 	sts	0x25AD, r1	; 0x8025ad <_ZN7UsartC17rxcFlagE>
	bool isOVF(){return ovfFlag;};
     e72:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <__data_end>
		}
		
		if (myTimer0.isOVF())
     e76:	88 23       	and	r24, r24
     e78:	c9 f2       	breq	.-78     	; 0xe2c <main+0xa4>
		{
			myComHandler.update();
     e7a:	ce 01       	movw	r24, r28
     e7c:	04 96       	adiw	r24, 0x04	; 4
     e7e:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN10ComHandler6updateEv>
	void setOVF(bool b){ovfFlag = b;};
     e82:	10 92 a2 25 	sts	0x25A2, r1	; 0x8025a2 <__data_end>
     e86:	d2 cf       	rjmp	.-92     	; 0xe2c <main+0xa4>

00000e88 <__subsf3>:
     e88:	50 58       	subi	r21, 0x80	; 128

00000e8a <__addsf3>:
     e8a:	bb 27       	eor	r27, r27
     e8c:	aa 27       	eor	r26, r26
     e8e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__addsf3x>
     e92:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>
     e96:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
     e9a:	38 f0       	brcs	.+14     	; 0xeaa <__addsf3+0x20>
     e9c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
     ea0:	20 f0       	brcs	.+8      	; 0xeaa <__addsf3+0x20>
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <__addsf3+0x28>
     ea4:	9f 3f       	cpi	r25, 0xFF	; 255
     ea6:	19 f4       	brne	.+6      	; 0xeae <__addsf3+0x24>
     ea8:	26 f4       	brtc	.+8      	; 0xeb2 <__addsf3+0x28>
     eaa:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_nan>
     eae:	0e f4       	brtc	.+2      	; 0xeb2 <__addsf3+0x28>
     eb0:	e0 95       	com	r30
     eb2:	e7 fb       	bst	r30, 7
     eb4:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_inf>

00000eb8 <__addsf3x>:
     eb8:	e9 2f       	mov	r30, r25
     eba:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
     ebe:	58 f3       	brcs	.-42     	; 0xe96 <__addsf3+0xc>
     ec0:	ba 17       	cp	r27, r26
     ec2:	62 07       	cpc	r22, r18
     ec4:	73 07       	cpc	r23, r19
     ec6:	84 07       	cpc	r24, r20
     ec8:	95 07       	cpc	r25, r21
     eca:	20 f0       	brcs	.+8      	; 0xed4 <__addsf3x+0x1c>
     ecc:	79 f4       	brne	.+30     	; 0xeec <__addsf3x+0x34>
     ece:	a6 f5       	brtc	.+104    	; 0xf38 <__addsf3x+0x80>
     ed0:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__fp_zero>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3x+0x20>
     ed6:	e0 95       	com	r30
     ed8:	0b 2e       	mov	r0, r27
     eda:	ba 2f       	mov	r27, r26
     edc:	a0 2d       	mov	r26, r0
     ede:	0b 01       	movw	r0, r22
     ee0:	b9 01       	movw	r22, r18
     ee2:	90 01       	movw	r18, r0
     ee4:	0c 01       	movw	r0, r24
     ee6:	ca 01       	movw	r24, r20
     ee8:	a0 01       	movw	r20, r0
     eea:	11 24       	eor	r1, r1
     eec:	ff 27       	eor	r31, r31
     eee:	59 1b       	sub	r21, r25
     ef0:	99 f0       	breq	.+38     	; 0xf18 <__addsf3x+0x60>
     ef2:	59 3f       	cpi	r21, 0xF9	; 249
     ef4:	50 f4       	brcc	.+20     	; 0xf0a <__addsf3x+0x52>
     ef6:	50 3e       	cpi	r21, 0xE0	; 224
     ef8:	68 f1       	brcs	.+90     	; 0xf54 <__addsf3x+0x9c>
     efa:	1a 16       	cp	r1, r26
     efc:	f0 40       	sbci	r31, 0x00	; 0
     efe:	a2 2f       	mov	r26, r18
     f00:	23 2f       	mov	r18, r19
     f02:	34 2f       	mov	r19, r20
     f04:	44 27       	eor	r20, r20
     f06:	58 5f       	subi	r21, 0xF8	; 248
     f08:	f3 cf       	rjmp	.-26     	; 0xef0 <__addsf3x+0x38>
     f0a:	46 95       	lsr	r20
     f0c:	37 95       	ror	r19
     f0e:	27 95       	ror	r18
     f10:	a7 95       	ror	r26
     f12:	f0 40       	sbci	r31, 0x00	; 0
     f14:	53 95       	inc	r21
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__addsf3x+0x52>
     f18:	7e f4       	brtc	.+30     	; 0xf38 <__addsf3x+0x80>
     f1a:	1f 16       	cp	r1, r31
     f1c:	ba 0b       	sbc	r27, r26
     f1e:	62 0b       	sbc	r22, r18
     f20:	73 0b       	sbc	r23, r19
     f22:	84 0b       	sbc	r24, r20
     f24:	ba f0       	brmi	.+46     	; 0xf54 <__addsf3x+0x9c>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	a1 f0       	breq	.+40     	; 0xf52 <__addsf3x+0x9a>
     f2a:	ff 0f       	add	r31, r31
     f2c:	bb 1f       	adc	r27, r27
     f2e:	66 1f       	adc	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	c2 f7       	brpl	.-16     	; 0xf26 <__addsf3x+0x6e>
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <__addsf3x+0x9c>
     f38:	ba 0f       	add	r27, r26
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 1f       	adc	r23, r19
     f3e:	84 1f       	adc	r24, r20
     f40:	48 f4       	brcc	.+18     	; 0xf54 <__addsf3x+0x9c>
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f7 95       	ror	r31
     f4c:	9e 3f       	cpi	r25, 0xFE	; 254
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__addsf3x+0x9a>
     f50:	b0 cf       	rjmp	.-160    	; 0xeb2 <__addsf3+0x28>
     f52:	93 95       	inc	r25
     f54:	88 0f       	add	r24, r24
     f56:	08 f0       	brcs	.+2      	; 0xf5a <__addsf3x+0xa2>
     f58:	99 27       	eor	r25, r25
     f5a:	ee 0f       	add	r30, r30
     f5c:	97 95       	ror	r25
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret

00000f62 <__cmpsf2>:
     f62:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_cmp>
     f66:	08 f4       	brcc	.+2      	; 0xf6a <__cmpsf2+0x8>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	08 95       	ret

00000f6c <__fp_cmp>:
     f6c:	99 0f       	add	r25, r25
     f6e:	00 08       	sbc	r0, r0
     f70:	55 0f       	add	r21, r21
     f72:	aa 0b       	sbc	r26, r26
     f74:	e0 e8       	ldi	r30, 0x80	; 128
     f76:	fe ef       	ldi	r31, 0xFE	; 254
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	e8 07       	cpc	r30, r24
     f7e:	f9 07       	cpc	r31, r25
     f80:	c0 f0       	brcs	.+48     	; 0xfb2 <__fp_cmp+0x46>
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	e4 07       	cpc	r30, r20
     f88:	f5 07       	cpc	r31, r21
     f8a:	98 f0       	brcs	.+38     	; 0xfb2 <__fp_cmp+0x46>
     f8c:	62 1b       	sub	r22, r18
     f8e:	73 0b       	sbc	r23, r19
     f90:	84 0b       	sbc	r24, r20
     f92:	95 0b       	sbc	r25, r21
     f94:	39 f4       	brne	.+14     	; 0xfa4 <__fp_cmp+0x38>
     f96:	0a 26       	eor	r0, r26
     f98:	61 f0       	breq	.+24     	; 0xfb2 <__fp_cmp+0x46>
     f9a:	23 2b       	or	r18, r19
     f9c:	24 2b       	or	r18, r20
     f9e:	25 2b       	or	r18, r21
     fa0:	21 f4       	brne	.+8      	; 0xfaa <__fp_cmp+0x3e>
     fa2:	08 95       	ret
     fa4:	0a 26       	eor	r0, r26
     fa6:	09 f4       	brne	.+2      	; 0xfaa <__fp_cmp+0x3e>
     fa8:	a1 40       	sbci	r26, 0x01	; 1
     faa:	a6 95       	lsr	r26
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	81 1d       	adc	r24, r1
     fb0:	81 1d       	adc	r24, r1
     fb2:	08 95       	ret

00000fb4 <__fp_inf>:
     fb4:	97 f9       	bld	r25, 7
     fb6:	9f 67       	ori	r25, 0x7F	; 127
     fb8:	80 e8       	ldi	r24, 0x80	; 128
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	08 95       	ret

00000fc0 <__fp_nan>:
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	80 ec       	ldi	r24, 0xC0	; 192
     fc4:	08 95       	ret

00000fc6 <__fp_pscA>:
     fc6:	00 24       	eor	r0, r0
     fc8:	0a 94       	dec	r0
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	09 06       	cpc	r0, r25
     fd2:	08 95       	ret

00000fd4 <__fp_pscB>:
     fd4:	00 24       	eor	r0, r0
     fd6:	0a 94       	dec	r0
     fd8:	12 16       	cp	r1, r18
     fda:	13 06       	cpc	r1, r19
     fdc:	14 06       	cpc	r1, r20
     fde:	05 06       	cpc	r0, r21
     fe0:	08 95       	ret

00000fe2 <__fp_round>:
     fe2:	09 2e       	mov	r0, r25
     fe4:	03 94       	inc	r0
     fe6:	00 0c       	add	r0, r0
     fe8:	11 f4       	brne	.+4      	; 0xfee <__fp_round+0xc>
     fea:	88 23       	and	r24, r24
     fec:	52 f0       	brmi	.+20     	; 0x1002 <__fp_round+0x20>
     fee:	bb 0f       	add	r27, r27
     ff0:	40 f4       	brcc	.+16     	; 0x1002 <__fp_round+0x20>
     ff2:	bf 2b       	or	r27, r31
     ff4:	11 f4       	brne	.+4      	; 0xffa <__fp_round+0x18>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__fp_round+0x20>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__fp_split3>:
    1004:	57 fd       	sbrc	r21, 7
    1006:	90 58       	subi	r25, 0x80	; 128
    1008:	44 0f       	add	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	59 f0       	breq	.+22     	; 0x1024 <__fp_splitA+0x10>
    100e:	5f 3f       	cpi	r21, 0xFF	; 255
    1010:	71 f0       	breq	.+28     	; 0x102e <__fp_splitA+0x1a>
    1012:	47 95       	ror	r20

00001014 <__fp_splitA>:
    1014:	88 0f       	add	r24, r24
    1016:	97 fb       	bst	r25, 7
    1018:	99 1f       	adc	r25, r25
    101a:	61 f0       	breq	.+24     	; 0x1034 <__fp_splitA+0x20>
    101c:	9f 3f       	cpi	r25, 0xFF	; 255
    101e:	79 f0       	breq	.+30     	; 0x103e <__fp_splitA+0x2a>
    1020:	87 95       	ror	r24
    1022:	08 95       	ret
    1024:	12 16       	cp	r1, r18
    1026:	13 06       	cpc	r1, r19
    1028:	14 06       	cpc	r1, r20
    102a:	55 1f       	adc	r21, r21
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <__fp_split3+0xe>
    102e:	46 95       	lsr	r20
    1030:	f1 df       	rcall	.-30     	; 0x1014 <__fp_splitA>
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <__fp_splitA+0x30>
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	99 1f       	adc	r25, r25
    103c:	f1 cf       	rjmp	.-30     	; 0x1020 <__fp_splitA+0xc>
    103e:	86 95       	lsr	r24
    1040:	71 05       	cpc	r23, r1
    1042:	61 05       	cpc	r22, r1
    1044:	08 94       	sec
    1046:	08 95       	ret

00001048 <__fp_zero>:
    1048:	e8 94       	clt

0000104a <__fp_szero>:
    104a:	bb 27       	eor	r27, r27
    104c:	66 27       	eor	r22, r22
    104e:	77 27       	eor	r23, r23
    1050:	cb 01       	movw	r24, r22
    1052:	97 f9       	bld	r25, 7
    1054:	08 95       	ret

00001056 <__gesf2>:
    1056:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_cmp>
    105a:	08 f4       	brcc	.+2      	; 0x105e <__gesf2+0x8>
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	08 95       	ret

00001060 <strtod>:
    1060:	8f 92       	push	r8
    1062:	9f 92       	push	r9
    1064:	af 92       	push	r10
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	6b 01       	movw	r12, r22
    107c:	61 15       	cp	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	19 f0       	breq	.+6      	; 0x1088 <strtod+0x28>
    1082:	fb 01       	movw	r30, r22
    1084:	80 83       	st	Z, r24
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	7e 01       	movw	r14, r28
    108a:	ff ef       	ldi	r31, 0xFF	; 255
    108c:	ef 1a       	sub	r14, r31
    108e:	ff 0a       	sbc	r15, r31
    1090:	08 81       	ld	r16, Y
    1092:	80 2f       	mov	r24, r16
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 8c 09 	call	0x1318	; 0x1318 <isspace>
    109a:	89 2b       	or	r24, r25
    109c:	11 f0       	breq	.+4      	; 0x10a2 <strtod+0x42>
    109e:	e7 01       	movw	r28, r14
    10a0:	f3 cf       	rjmp	.-26     	; 0x1088 <strtod+0x28>
    10a2:	0d 32       	cpi	r16, 0x2D	; 45
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <strtod+0x54>
    10a6:	7e 01       	movw	r14, r28
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	e8 0e       	add	r14, r24
    10ac:	f1 1c       	adc	r15, r1
    10ae:	09 81       	ldd	r16, Y+1	; 0x01
    10b0:	11 e0       	ldi	r17, 0x01	; 1
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <strtod+0x64>
    10b4:	0b 32       	cpi	r16, 0x2B	; 43
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <strtod+0x62>
    10b8:	7e 01       	movw	r14, r28
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	e9 0e       	add	r14, r25
    10be:	f1 1c       	adc	r15, r1
    10c0:	09 81       	ldd	r16, Y+1	; 0x01
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	e7 01       	movw	r28, r14
    10c6:	21 97       	sbiw	r28, 0x01	; 1
    10c8:	43 e0       	ldi	r20, 0x03	; 3
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	72 e0       	ldi	r23, 0x02	; 2
    10d0:	ce 01       	movw	r24, r28
    10d2:	0e 94 95 09 	call	0x132a	; 0x132a <strncasecmp_P>
    10d6:	89 2b       	or	r24, r25
    10d8:	c1 f4       	brne	.+48     	; 0x110a <strtod+0xaa>
    10da:	23 96       	adiw	r28, 0x03	; 3
    10dc:	45 e0       	ldi	r20, 0x05	; 5
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	6f ef       	ldi	r22, 0xFF	; 255
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 95 09 	call	0x132a	; 0x132a <strncasecmp_P>
    10ea:	89 2b       	or	r24, r25
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <strtod+0x90>
    10ee:	25 96       	adiw	r28, 0x05	; 5
    10f0:	c1 14       	cp	r12, r1
    10f2:	d1 04       	cpc	r13, r1
    10f4:	19 f0       	breq	.+6      	; 0x10fc <strtod+0x9c>
    10f6:	f6 01       	movw	r30, r12
    10f8:	c0 83       	st	Z, r28
    10fa:	d1 83       	std	Z+1, r29	; 0x01
    10fc:	11 11       	cpse	r17, r1
    10fe:	f6 c0       	rjmp	.+492    	; 0x12ec <strtod+0x28c>
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	80 e8       	ldi	r24, 0x80	; 128
    1106:	9f e7       	ldi	r25, 0x7F	; 127
    1108:	fa c0       	rjmp	.+500    	; 0x12fe <strtod+0x29e>
    110a:	43 e0       	ldi	r20, 0x03	; 3
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	6c ef       	ldi	r22, 0xFC	; 252
    1110:	71 e0       	ldi	r23, 0x01	; 1
    1112:	ce 01       	movw	r24, r28
    1114:	0e 94 95 09 	call	0x132a	; 0x132a <strncasecmp_P>
    1118:	89 2b       	or	r24, r25
    111a:	59 f4       	brne	.+22     	; 0x1132 <strtod+0xd2>
    111c:	c1 14       	cp	r12, r1
    111e:	d1 04       	cpc	r13, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <strtod+0xc4>
    1122:	e9 c0       	rjmp	.+466    	; 0x12f6 <strtod+0x296>
    1124:	f2 e0       	ldi	r31, 0x02	; 2
    1126:	ef 0e       	add	r14, r31
    1128:	f1 1c       	adc	r15, r1
    112a:	f6 01       	movw	r30, r12
    112c:	e0 82       	st	Z, r14
    112e:	f1 82       	std	Z+1, r15	; 0x01
    1130:	e2 c0       	rjmp	.+452    	; 0x12f6 <strtod+0x296>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	c0 e0       	ldi	r28, 0x00	; 0
    113a:	d0 e0       	ldi	r29, 0x00	; 0
    113c:	f7 01       	movw	r30, r14
    113e:	60 ed       	ldi	r22, 0xD0	; 208
    1140:	a6 2e       	mov	r10, r22
    1142:	a0 0e       	add	r10, r16
    1144:	89 e0       	ldi	r24, 0x09	; 9
    1146:	8a 15       	cp	r24, r10
    1148:	30 f1       	brcs	.+76     	; 0x1196 <strtod+0x136>
    114a:	91 2f       	mov	r25, r17
    114c:	92 60       	ori	r25, 0x02	; 2
    114e:	b9 2e       	mov	r11, r25
    1150:	81 2f       	mov	r24, r17
    1152:	88 70       	andi	r24, 0x08	; 8
    1154:	12 ff       	sbrs	r17, 2
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <strtod+0x100>
    1158:	81 11       	cpse	r24, r1
    115a:	24 c0       	rjmp	.+72     	; 0x11a4 <strtod+0x144>
    115c:	21 96       	adiw	r28, 0x01	; 1
    115e:	22 c0       	rjmp	.+68     	; 0x11a4 <strtod+0x144>
    1160:	81 11       	cpse	r24, r1
    1162:	21 97       	sbiw	r28, 0x01	; 1
    1164:	a5 e0       	ldi	r26, 0x05	; 5
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__muluhisi3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	aa 1f       	adc	r26, r26
    1176:	bb 1f       	adc	r27, r27
    1178:	9c 01       	movw	r18, r24
    117a:	ad 01       	movw	r20, r26
    117c:	2a 0d       	add	r18, r10
    117e:	31 1d       	adc	r19, r1
    1180:	41 1d       	adc	r20, r1
    1182:	51 1d       	adc	r21, r1
    1184:	28 39       	cpi	r18, 0x98	; 152
    1186:	89 e9       	ldi	r24, 0x99	; 153
    1188:	38 07       	cpc	r19, r24
    118a:	48 07       	cpc	r20, r24
    118c:	89 e1       	ldi	r24, 0x19	; 25
    118e:	58 07       	cpc	r21, r24
    1190:	48 f0       	brcs	.+18     	; 0x11a4 <strtod+0x144>
    1192:	16 60       	ori	r17, 0x06	; 6
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <strtod+0x142>
    1196:	9e ef       	ldi	r25, 0xFE	; 254
    1198:	a9 12       	cpse	r10, r25
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <strtod+0x150>
    119c:	13 fd       	sbrc	r17, 3
    119e:	40 c0       	rjmp	.+128    	; 0x1220 <strtod+0x1c0>
    11a0:	18 60       	ori	r17, 0x08	; 8
    11a2:	b1 2e       	mov	r11, r17
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	e8 1a       	sub	r14, r24
    11a8:	f8 0a       	sbc	r15, r24
    11aa:	00 81       	ld	r16, Z
    11ac:	1b 2d       	mov	r17, r11
    11ae:	c6 cf       	rjmp	.-116    	; 0x113c <strtod+0xdc>
    11b0:	80 2f       	mov	r24, r16
    11b2:	8f 7d       	andi	r24, 0xDF	; 223
    11b4:	85 34       	cpi	r24, 0x45	; 69
    11b6:	a1 f5       	brne	.+104    	; 0x1220 <strtod+0x1c0>
    11b8:	80 81       	ld	r24, Z
    11ba:	8d 32       	cpi	r24, 0x2D	; 45
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <strtod+0x162>
    11be:	10 61       	ori	r17, 0x10	; 16
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <strtod+0x16e>
    11c2:	8b 32       	cpi	r24, 0x2B	; 43
    11c4:	21 f0       	breq	.+8      	; 0x11ce <strtod+0x16e>
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <strtod+0x176>
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	32 96       	adiw	r30, 0x02	; 2
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	80 53       	subi	r24, 0x30	; 48
    11d8:	8a 30       	cpi	r24, 0x0A	; 10
    11da:	18 f0       	brcs	.+6      	; 0x11e2 <strtod+0x182>
    11dc:	e6 1b       	sub	r30, r22
    11de:	f7 0b       	sbc	r31, r23
    11e0:	1f c0       	rjmp	.+62     	; 0x1220 <strtod+0x1c0>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	60 38       	cpi	r22, 0x80	; 128
    11e8:	9c e0       	ldi	r25, 0x0C	; 12
    11ea:	79 07       	cpc	r23, r25
    11ec:	5c f4       	brge	.+22     	; 0x1204 <strtod+0x1a4>
    11ee:	db 01       	movw	r26, r22
    11f0:	aa 0f       	add	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	aa 0f       	add	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	6a 0f       	add	r22, r26
    11fa:	7b 1f       	adc	r23, r27
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	68 0f       	add	r22, r24
    1202:	71 1d       	adc	r23, r1
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	df 01       	movw	r26, r30
    1208:	11 97       	sbiw	r26, 0x01	; 1
    120a:	8c 91       	ld	r24, X
    120c:	80 53       	subi	r24, 0x30	; 48
    120e:	8a 30       	cpi	r24, 0x0A	; 10
    1210:	50 f3       	brcs	.-44     	; 0x11e6 <strtod+0x186>
    1212:	14 ff       	sbrs	r17, 4
    1214:	03 c0       	rjmp	.+6      	; 0x121c <strtod+0x1bc>
    1216:	71 95       	neg	r23
    1218:	61 95       	neg	r22
    121a:	71 09       	sbc	r23, r1
    121c:	c6 0f       	add	r28, r22
    121e:	d7 1f       	adc	r29, r23
    1220:	11 ff       	sbrs	r17, 1
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <strtod+0x1d4>
    1224:	c1 14       	cp	r12, r1
    1226:	d1 04       	cpc	r13, r1
    1228:	29 f0       	breq	.+10     	; 0x1234 <strtod+0x1d4>
    122a:	cf 01       	movw	r24, r30
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f6 01       	movw	r30, r12
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	ca 01       	movw	r24, r20
    1236:	b9 01       	movw	r22, r18
    1238:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
    123c:	21 2f       	mov	r18, r17
    123e:	23 70       	andi	r18, 0x03	; 3
    1240:	23 30       	cpi	r18, 0x03	; 3
    1242:	19 f0       	breq	.+6      	; 0x124a <strtod+0x1ea>
    1244:	4b 01       	movw	r8, r22
    1246:	5c 01       	movw	r10, r24
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <strtod+0x1f6>
    124a:	4b 01       	movw	r8, r22
    124c:	5c 01       	movw	r10, r24
    124e:	b7 fa       	bst	r11, 7
    1250:	b0 94       	com	r11
    1252:	b7 f8       	bld	r11, 7
    1254:	b0 94       	com	r11
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	c5 01       	movw	r24, r10
    125e:	b4 01       	movw	r22, r8
    1260:	0e 94 b1 07 	call	0xf62	; 0xf62 <__cmpsf2>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <strtod+0x20a>
    1268:	3e c0       	rjmp	.+124    	; 0x12e6 <strtod+0x286>
    126a:	d7 ff       	sbrs	r29, 7
    126c:	06 c0       	rjmp	.+12     	; 0x127a <strtod+0x21a>
    126e:	d1 95       	neg	r29
    1270:	c1 95       	neg	r28
    1272:	d1 09       	sbc	r29, r1
    1274:	0b e1       	ldi	r16, 0x1B	; 27
    1276:	12 e0       	ldi	r17, 0x02	; 2
    1278:	02 c0       	rjmp	.+4      	; 0x127e <strtod+0x21e>
    127a:	03 e3       	ldi	r16, 0x33	; 51
    127c:	12 e0       	ldi	r17, 0x02	; 2
    127e:	68 01       	movw	r12, r16
    1280:	f8 e1       	ldi	r31, 0x18	; 24
    1282:	cf 1a       	sub	r12, r31
    1284:	d1 08       	sbc	r13, r1
    1286:	90 e2       	ldi	r25, 0x20	; 32
    1288:	e9 2e       	mov	r14, r25
    128a:	f1 2c       	mov	r15, r1
    128c:	ce 15       	cp	r28, r14
    128e:	df 05       	cpc	r29, r15
    1290:	74 f0       	brlt	.+28     	; 0x12ae <strtod+0x24e>
    1292:	f8 01       	movw	r30, r16
    1294:	25 91       	lpm	r18, Z+
    1296:	35 91       	lpm	r19, Z+
    1298:	45 91       	lpm	r20, Z+
    129a:	54 91       	lpm	r21, Z
    129c:	c5 01       	movw	r24, r10
    129e:	b4 01       	movw	r22, r8
    12a0:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
    12a4:	4b 01       	movw	r8, r22
    12a6:	5c 01       	movw	r10, r24
    12a8:	ce 19       	sub	r28, r14
    12aa:	df 09       	sbc	r29, r15
    12ac:	ef cf       	rjmp	.-34     	; 0x128c <strtod+0x22c>
    12ae:	04 50       	subi	r16, 0x04	; 4
    12b0:	11 09       	sbc	r17, r1
    12b2:	f5 94       	asr	r15
    12b4:	e7 94       	ror	r14
    12b6:	0c 15       	cp	r16, r12
    12b8:	1d 05       	cpc	r17, r13
    12ba:	41 f7       	brne	.-48     	; 0x128c <strtod+0x22c>
    12bc:	8a 2d       	mov	r24, r10
    12be:	88 0f       	add	r24, r24
    12c0:	8b 2d       	mov	r24, r11
    12c2:	88 1f       	adc	r24, r24
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	49 f0       	breq	.+18     	; 0x12da <strtod+0x27a>
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	c5 01       	movw	r24, r10
    12d0:	b4 01       	movw	r22, r8
    12d2:	0e 94 b1 07 	call	0xf62	; 0xf62 <__cmpsf2>
    12d6:	81 11       	cpse	r24, r1
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <strtod+0x286>
    12da:	82 e2       	ldi	r24, 0x22	; 34
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	80 93 b1 25 	sts	0x25B1, r24	; 0x8025b1 <errno>
    12e2:	90 93 b2 25 	sts	0x25B2, r25	; 0x8025b2 <errno+0x1>
    12e6:	c5 01       	movw	r24, r10
    12e8:	b4 01       	movw	r22, r8
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <strtod+0x29e>
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	9f ef       	ldi	r25, 0xFF	; 255
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <strtod+0x29e>
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	80 ec       	ldi	r24, 0xC0	; 192
    12fc:	9f e7       	ldi	r25, 0x7F	; 127
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	9f 90       	pop	r9
    1314:	8f 90       	pop	r8
    1316:	08 95       	ret

00001318 <isspace>:
    1318:	91 11       	cpse	r25, r1
    131a:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__ctype_isfalse>
    131e:	80 32       	cpi	r24, 0x20	; 32
    1320:	19 f0       	breq	.+6      	; 0x1328 <isspace+0x10>
    1322:	89 50       	subi	r24, 0x09	; 9
    1324:	85 50       	subi	r24, 0x05	; 5
    1326:	c8 f7       	brcc	.-14     	; 0x131a <isspace+0x2>
    1328:	08 95       	ret

0000132a <strncasecmp_P>:
    132a:	fb 01       	movw	r30, r22
    132c:	dc 01       	movw	r26, r24
    132e:	41 50       	subi	r20, 0x01	; 1
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	88 f0       	brcs	.+34     	; 0x1356 <strncasecmp_P+0x2c>
    1334:	8d 91       	ld	r24, X+
    1336:	81 34       	cpi	r24, 0x41	; 65
    1338:	1c f0       	brlt	.+6      	; 0x1340 <strncasecmp_P+0x16>
    133a:	8b 35       	cpi	r24, 0x5B	; 91
    133c:	0c f4       	brge	.+2      	; 0x1340 <strncasecmp_P+0x16>
    133e:	80 5e       	subi	r24, 0xE0	; 224
    1340:	65 91       	lpm	r22, Z+
    1342:	61 34       	cpi	r22, 0x41	; 65
    1344:	1c f0       	brlt	.+6      	; 0x134c <strncasecmp_P+0x22>
    1346:	6b 35       	cpi	r22, 0x5B	; 91
    1348:	0c f4       	brge	.+2      	; 0x134c <strncasecmp_P+0x22>
    134a:	60 5e       	subi	r22, 0xE0	; 224
    134c:	86 1b       	sub	r24, r22
    134e:	61 11       	cpse	r22, r1
    1350:	71 f3       	breq	.-36     	; 0x132e <strncasecmp_P+0x4>
    1352:	99 0b       	sbc	r25, r25
    1354:	08 95       	ret
    1356:	88 1b       	sub	r24, r24
    1358:	fc cf       	rjmp	.-8      	; 0x1352 <strncasecmp_P+0x28>

0000135a <memset>:
    135a:	dc 01       	movw	r26, r24
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <memset+0x6>
    135e:	6d 93       	st	X+, r22
    1360:	41 50       	subi	r20, 0x01	; 1
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	e0 f7       	brcc	.-8      	; 0x135e <memset+0x4>
    1366:	08 95       	ret

00001368 <snprintf>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2e 97       	sbiw	r28, 0x0e	; 14
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0e 89       	ldd	r16, Y+22	; 0x16
    137c:	1f 89       	ldd	r17, Y+23	; 0x17
    137e:	88 8d       	ldd	r24, Y+24	; 0x18
    1380:	99 8d       	ldd	r25, Y+25	; 0x19
    1382:	26 e0       	ldi	r18, 0x06	; 6
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	09 83       	std	Y+1, r16	; 0x01
    1388:	1a 83       	std	Y+2, r17	; 0x02
    138a:	97 ff       	sbrs	r25, 7
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <snprintf+0x2a>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e8       	ldi	r25, 0x80	; 128
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	ae 01       	movw	r20, r28
    139a:	44 5e       	subi	r20, 0xE4	; 228
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    13a0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	0e 94 95 0a 	call	0x152a	; 0x152a <vfprintf>
    13aa:	4d 81       	ldd	r20, Y+5	; 0x05
    13ac:	5e 81       	ldd	r21, Y+6	; 0x06
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	0a c0       	rjmp	.+20     	; 0x13c6 <snprintf+0x5e>
    13b2:	2f 81       	ldd	r18, Y+7	; 0x07
    13b4:	38 85       	ldd	r19, Y+8	; 0x08
    13b6:	42 17       	cp	r20, r18
    13b8:	53 07       	cpc	r21, r19
    13ba:	0c f4       	brge	.+2      	; 0x13be <snprintf+0x56>
    13bc:	9a 01       	movw	r18, r20
    13be:	f8 01       	movw	r30, r16
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	10 82       	st	Z, r1
    13c6:	2e 96       	adiw	r28, 0x0e	; 14
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <__floatunsisf>:
    13d6:	e8 94       	clt
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <__floatsisf+0x12>

000013da <__floatsisf>:
    13da:	97 fb       	bst	r25, 7
    13dc:	3e f4       	brtc	.+14     	; 0x13ec <__floatsisf+0x12>
    13de:	90 95       	com	r25
    13e0:	80 95       	com	r24
    13e2:	70 95       	com	r23
    13e4:	61 95       	neg	r22
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	99 23       	and	r25, r25
    13ee:	a9 f0       	breq	.+42     	; 0x141a <__floatsisf+0x40>
    13f0:	f9 2f       	mov	r31, r25
    13f2:	96 e9       	ldi	r25, 0x96	; 150
    13f4:	bb 27       	eor	r27, r27
    13f6:	93 95       	inc	r25
    13f8:	f6 95       	lsr	r31
    13fa:	87 95       	ror	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f1 11       	cpse	r31, r1
    1404:	f8 cf       	rjmp	.-16     	; 0x13f6 <__floatsisf+0x1c>
    1406:	fa f4       	brpl	.+62     	; 0x1446 <__floatsisf+0x6c>
    1408:	bb 0f       	add	r27, r27
    140a:	11 f4       	brne	.+4      	; 0x1410 <__floatsisf+0x36>
    140c:	60 ff       	sbrs	r22, 0
    140e:	1b c0       	rjmp	.+54     	; 0x1446 <__floatsisf+0x6c>
    1410:	6f 5f       	subi	r22, 0xFF	; 255
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	16 c0       	rjmp	.+44     	; 0x1446 <__floatsisf+0x6c>
    141a:	88 23       	and	r24, r24
    141c:	11 f0       	breq	.+4      	; 0x1422 <__floatsisf+0x48>
    141e:	96 e9       	ldi	r25, 0x96	; 150
    1420:	11 c0       	rjmp	.+34     	; 0x1444 <__floatsisf+0x6a>
    1422:	77 23       	and	r23, r23
    1424:	21 f0       	breq	.+8      	; 0x142e <__floatsisf+0x54>
    1426:	9e e8       	ldi	r25, 0x8E	; 142
    1428:	87 2f       	mov	r24, r23
    142a:	76 2f       	mov	r23, r22
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <__floatsisf+0x5e>
    142e:	66 23       	and	r22, r22
    1430:	71 f0       	breq	.+28     	; 0x144e <__floatsisf+0x74>
    1432:	96 e8       	ldi	r25, 0x86	; 134
    1434:	86 2f       	mov	r24, r22
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	2a f0       	brmi	.+10     	; 0x1446 <__floatsisf+0x6c>
    143c:	9a 95       	dec	r25
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	da f7       	brpl	.-10     	; 0x143c <__floatsisf+0x62>
    1446:	88 0f       	add	r24, r24
    1448:	96 95       	lsr	r25
    144a:	87 95       	ror	r24
    144c:	97 f9       	bld	r25, 7
    144e:	08 95       	ret

00001450 <__mulsf3>:
    1450:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__mulsf3x>
    1454:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_round>
    1458:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_pscA>
    145c:	38 f0       	brcs	.+14     	; 0x146c <__mulsf3+0x1c>
    145e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscB>
    1462:	20 f0       	brcs	.+8      	; 0x146c <__mulsf3+0x1c>
    1464:	95 23       	and	r25, r21
    1466:	11 f0       	breq	.+4      	; 0x146c <__mulsf3+0x1c>
    1468:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_inf>
    146c:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_nan>
    1470:	11 24       	eor	r1, r1
    1472:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>

00001476 <__mulsf3x>:
    1476:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_split3>
    147a:	70 f3       	brcs	.-36     	; 0x1458 <__mulsf3+0x8>

0000147c <__mulsf3_pse>:
    147c:	95 9f       	mul	r25, r21
    147e:	c1 f3       	breq	.-16     	; 0x1470 <__mulsf3+0x20>
    1480:	95 0f       	add	r25, r21
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	55 1f       	adc	r21, r21
    1486:	62 9f       	mul	r22, r18
    1488:	f0 01       	movw	r30, r0
    148a:	72 9f       	mul	r23, r18
    148c:	bb 27       	eor	r27, r27
    148e:	f0 0d       	add	r31, r0
    1490:	b1 1d       	adc	r27, r1
    1492:	63 9f       	mul	r22, r19
    1494:	aa 27       	eor	r26, r26
    1496:	f0 0d       	add	r31, r0
    1498:	b1 1d       	adc	r27, r1
    149a:	aa 1f       	adc	r26, r26
    149c:	64 9f       	mul	r22, r20
    149e:	66 27       	eor	r22, r22
    14a0:	b0 0d       	add	r27, r0
    14a2:	a1 1d       	adc	r26, r1
    14a4:	66 1f       	adc	r22, r22
    14a6:	82 9f       	mul	r24, r18
    14a8:	22 27       	eor	r18, r18
    14aa:	b0 0d       	add	r27, r0
    14ac:	a1 1d       	adc	r26, r1
    14ae:	62 1f       	adc	r22, r18
    14b0:	73 9f       	mul	r23, r19
    14b2:	b0 0d       	add	r27, r0
    14b4:	a1 1d       	adc	r26, r1
    14b6:	62 1f       	adc	r22, r18
    14b8:	83 9f       	mul	r24, r19
    14ba:	a0 0d       	add	r26, r0
    14bc:	61 1d       	adc	r22, r1
    14be:	22 1f       	adc	r18, r18
    14c0:	74 9f       	mul	r23, r20
    14c2:	33 27       	eor	r19, r19
    14c4:	a0 0d       	add	r26, r0
    14c6:	61 1d       	adc	r22, r1
    14c8:	23 1f       	adc	r18, r19
    14ca:	84 9f       	mul	r24, r20
    14cc:	60 0d       	add	r22, r0
    14ce:	21 1d       	adc	r18, r1
    14d0:	82 2f       	mov	r24, r18
    14d2:	76 2f       	mov	r23, r22
    14d4:	6a 2f       	mov	r22, r26
    14d6:	11 24       	eor	r1, r1
    14d8:	9f 57       	subi	r25, 0x7F	; 127
    14da:	50 40       	sbci	r21, 0x00	; 0
    14dc:	9a f0       	brmi	.+38     	; 0x1504 <__mulsf3_pse+0x88>
    14de:	f1 f0       	breq	.+60     	; 0x151c <__mulsf3_pse+0xa0>
    14e0:	88 23       	and	r24, r24
    14e2:	4a f0       	brmi	.+18     	; 0x14f6 <__mulsf3_pse+0x7a>
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	bb 1f       	adc	r27, r27
    14ea:	66 1f       	adc	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	91 50       	subi	r25, 0x01	; 1
    14f2:	50 40       	sbci	r21, 0x00	; 0
    14f4:	a9 f7       	brne	.-22     	; 0x14e0 <__mulsf3_pse+0x64>
    14f6:	9e 3f       	cpi	r25, 0xFE	; 254
    14f8:	51 05       	cpc	r21, r1
    14fa:	80 f0       	brcs	.+32     	; 0x151c <__mulsf3_pse+0xa0>
    14fc:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_inf>
    1500:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	e4 f3       	brlt	.-8      	; 0x1500 <__mulsf3_pse+0x84>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	d4 f3       	brlt	.-12     	; 0x1500 <__mulsf3_pse+0x84>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	e7 95       	ror	r30
    1518:	9f 5f       	subi	r25, 0xFF	; 255
    151a:	c1 f7       	brne	.-16     	; 0x150c <__mulsf3_pse+0x90>
    151c:	fe 2b       	or	r31, r30
    151e:	88 0f       	add	r24, r24
    1520:	91 1d       	adc	r25, r1
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <vfprintf>:
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2b 97       	sbiw	r28, 0x0b	; 11
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	6c 01       	movw	r12, r24
    155a:	7b 01       	movw	r14, r22
    155c:	8a 01       	movw	r16, r20
    155e:	fc 01       	movw	r30, r24
    1560:	16 82       	std	Z+6, r1	; 0x06
    1562:	17 82       	std	Z+7, r1	; 0x07
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	81 ff       	sbrs	r24, 1
    1568:	cc c1       	rjmp	.+920    	; 0x1902 <vfprintf+0x3d8>
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	3c 01       	movw	r6, r24
    1570:	f6 01       	movw	r30, r12
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	f7 01       	movw	r30, r14
    1576:	93 fd       	sbrc	r25, 3
    1578:	85 91       	lpm	r24, Z+
    157a:	93 ff       	sbrs	r25, 3
    157c:	81 91       	ld	r24, Z+
    157e:	7f 01       	movw	r14, r30
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <vfprintf+0x5c>
    1584:	ba c1       	rjmp	.+884    	; 0x18fa <vfprintf+0x3d0>
    1586:	85 32       	cpi	r24, 0x25	; 37
    1588:	39 f4       	brne	.+14     	; 0x1598 <vfprintf+0x6e>
    158a:	93 fd       	sbrc	r25, 3
    158c:	85 91       	lpm	r24, Z+
    158e:	93 ff       	sbrs	r25, 3
    1590:	81 91       	ld	r24, Z+
    1592:	7f 01       	movw	r14, r30
    1594:	85 32       	cpi	r24, 0x25	; 37
    1596:	29 f4       	brne	.+10     	; 0x15a2 <vfprintf+0x78>
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    15a0:	e7 cf       	rjmp	.-50     	; 0x1570 <vfprintf+0x46>
    15a2:	91 2c       	mov	r9, r1
    15a4:	21 2c       	mov	r2, r1
    15a6:	31 2c       	mov	r3, r1
    15a8:	ff e1       	ldi	r31, 0x1F	; 31
    15aa:	f3 15       	cp	r31, r3
    15ac:	d8 f0       	brcs	.+54     	; 0x15e4 <vfprintf+0xba>
    15ae:	8b 32       	cpi	r24, 0x2B	; 43
    15b0:	79 f0       	breq	.+30     	; 0x15d0 <vfprintf+0xa6>
    15b2:	38 f4       	brcc	.+14     	; 0x15c2 <vfprintf+0x98>
    15b4:	80 32       	cpi	r24, 0x20	; 32
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <vfprintf+0xac>
    15b8:	83 32       	cpi	r24, 0x23	; 35
    15ba:	a1 f4       	brne	.+40     	; 0x15e4 <vfprintf+0xba>
    15bc:	23 2d       	mov	r18, r3
    15be:	20 61       	ori	r18, 0x10	; 16
    15c0:	1d c0       	rjmp	.+58     	; 0x15fc <vfprintf+0xd2>
    15c2:	8d 32       	cpi	r24, 0x2D	; 45
    15c4:	61 f0       	breq	.+24     	; 0x15de <vfprintf+0xb4>
    15c6:	80 33       	cpi	r24, 0x30	; 48
    15c8:	69 f4       	brne	.+26     	; 0x15e4 <vfprintf+0xba>
    15ca:	23 2d       	mov	r18, r3
    15cc:	21 60       	ori	r18, 0x01	; 1
    15ce:	16 c0       	rjmp	.+44     	; 0x15fc <vfprintf+0xd2>
    15d0:	83 2d       	mov	r24, r3
    15d2:	82 60       	ori	r24, 0x02	; 2
    15d4:	38 2e       	mov	r3, r24
    15d6:	e3 2d       	mov	r30, r3
    15d8:	e4 60       	ori	r30, 0x04	; 4
    15da:	3e 2e       	mov	r3, r30
    15dc:	2a c0       	rjmp	.+84     	; 0x1632 <vfprintf+0x108>
    15de:	f3 2d       	mov	r31, r3
    15e0:	f8 60       	ori	r31, 0x08	; 8
    15e2:	1d c0       	rjmp	.+58     	; 0x161e <vfprintf+0xf4>
    15e4:	37 fc       	sbrc	r3, 7
    15e6:	2d c0       	rjmp	.+90     	; 0x1642 <vfprintf+0x118>
    15e8:	20 ed       	ldi	r18, 0xD0	; 208
    15ea:	28 0f       	add	r18, r24
    15ec:	2a 30       	cpi	r18, 0x0A	; 10
    15ee:	40 f0       	brcs	.+16     	; 0x1600 <vfprintf+0xd6>
    15f0:	8e 32       	cpi	r24, 0x2E	; 46
    15f2:	b9 f4       	brne	.+46     	; 0x1622 <vfprintf+0xf8>
    15f4:	36 fc       	sbrc	r3, 6
    15f6:	81 c1       	rjmp	.+770    	; 0x18fa <vfprintf+0x3d0>
    15f8:	23 2d       	mov	r18, r3
    15fa:	20 64       	ori	r18, 0x40	; 64
    15fc:	32 2e       	mov	r3, r18
    15fe:	19 c0       	rjmp	.+50     	; 0x1632 <vfprintf+0x108>
    1600:	36 fe       	sbrs	r3, 6
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <vfprintf+0xe6>
    1604:	8a e0       	ldi	r24, 0x0A	; 10
    1606:	98 9e       	mul	r9, r24
    1608:	20 0d       	add	r18, r0
    160a:	11 24       	eor	r1, r1
    160c:	92 2e       	mov	r9, r18
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <vfprintf+0x108>
    1610:	ea e0       	ldi	r30, 0x0A	; 10
    1612:	2e 9e       	mul	r2, r30
    1614:	20 0d       	add	r18, r0
    1616:	11 24       	eor	r1, r1
    1618:	22 2e       	mov	r2, r18
    161a:	f3 2d       	mov	r31, r3
    161c:	f0 62       	ori	r31, 0x20	; 32
    161e:	3f 2e       	mov	r3, r31
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <vfprintf+0x108>
    1622:	8c 36       	cpi	r24, 0x6C	; 108
    1624:	21 f4       	brne	.+8      	; 0x162e <vfprintf+0x104>
    1626:	83 2d       	mov	r24, r3
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	38 2e       	mov	r3, r24
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x108>
    162e:	88 36       	cpi	r24, 0x68	; 104
    1630:	41 f4       	brne	.+16     	; 0x1642 <vfprintf+0x118>
    1632:	f7 01       	movw	r30, r14
    1634:	93 fd       	sbrc	r25, 3
    1636:	85 91       	lpm	r24, Z+
    1638:	93 ff       	sbrs	r25, 3
    163a:	81 91       	ld	r24, Z+
    163c:	7f 01       	movw	r14, r30
    163e:	81 11       	cpse	r24, r1
    1640:	b3 cf       	rjmp	.-154    	; 0x15a8 <vfprintf+0x7e>
    1642:	98 2f       	mov	r25, r24
    1644:	9f 7d       	andi	r25, 0xDF	; 223
    1646:	95 54       	subi	r25, 0x45	; 69
    1648:	93 30       	cpi	r25, 0x03	; 3
    164a:	28 f4       	brcc	.+10     	; 0x1656 <vfprintf+0x12c>
    164c:	0c 5f       	subi	r16, 0xFC	; 252
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	9f e3       	ldi	r25, 0x3F	; 63
    1652:	99 83       	std	Y+1, r25	; 0x01
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <vfprintf+0x146>
    1656:	83 36       	cpi	r24, 0x63	; 99
    1658:	31 f0       	breq	.+12     	; 0x1666 <vfprintf+0x13c>
    165a:	83 37       	cpi	r24, 0x73	; 115
    165c:	71 f0       	breq	.+28     	; 0x167a <vfprintf+0x150>
    165e:	83 35       	cpi	r24, 0x53	; 83
    1660:	09 f0       	breq	.+2      	; 0x1664 <vfprintf+0x13a>
    1662:	59 c0       	rjmp	.+178    	; 0x1716 <vfprintf+0x1ec>
    1664:	21 c0       	rjmp	.+66     	; 0x16a8 <vfprintf+0x17e>
    1666:	f8 01       	movw	r30, r16
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	0e 5f       	subi	r16, 0xFE	; 254
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	88 24       	eor	r8, r8
    1672:	83 94       	inc	r8
    1674:	91 2c       	mov	r9, r1
    1676:	53 01       	movw	r10, r6
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <vfprintf+0x176>
    167a:	28 01       	movw	r4, r16
    167c:	f2 e0       	ldi	r31, 0x02	; 2
    167e:	4f 0e       	add	r4, r31
    1680:	51 1c       	adc	r5, r1
    1682:	f8 01       	movw	r30, r16
    1684:	a0 80       	ld	r10, Z
    1686:	b1 80       	ldd	r11, Z+1	; 0x01
    1688:	36 fe       	sbrs	r3, 6
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <vfprintf+0x168>
    168c:	69 2d       	mov	r22, r9
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x16c>
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f ef       	ldi	r23, 0xFF	; 255
    1696:	c5 01       	movw	r24, r10
    1698:	0e 94 a7 0c 	call	0x194e	; 0x194e <strnlen>
    169c:	4c 01       	movw	r8, r24
    169e:	82 01       	movw	r16, r4
    16a0:	f3 2d       	mov	r31, r3
    16a2:	ff 77       	andi	r31, 0x7F	; 127
    16a4:	3f 2e       	mov	r3, r31
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <vfprintf+0x1aa>
    16a8:	28 01       	movw	r4, r16
    16aa:	22 e0       	ldi	r18, 0x02	; 2
    16ac:	42 0e       	add	r4, r18
    16ae:	51 1c       	adc	r5, r1
    16b0:	f8 01       	movw	r30, r16
    16b2:	a0 80       	ld	r10, Z
    16b4:	b1 80       	ldd	r11, Z+1	; 0x01
    16b6:	36 fe       	sbrs	r3, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x196>
    16ba:	69 2d       	mov	r22, r9
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x19a>
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	7f ef       	ldi	r23, 0xFF	; 255
    16c4:	c5 01       	movw	r24, r10
    16c6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <strnlen_P>
    16ca:	4c 01       	movw	r8, r24
    16cc:	f3 2d       	mov	r31, r3
    16ce:	f0 68       	ori	r31, 0x80	; 128
    16d0:	3f 2e       	mov	r3, r31
    16d2:	82 01       	movw	r16, r4
    16d4:	33 fc       	sbrc	r3, 3
    16d6:	1b c0       	rjmp	.+54     	; 0x170e <vfprintf+0x1e4>
    16d8:	82 2d       	mov	r24, r2
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 16       	cp	r8, r24
    16de:	99 06       	cpc	r9, r25
    16e0:	b0 f4       	brcc	.+44     	; 0x170e <vfprintf+0x1e4>
    16e2:	b6 01       	movw	r22, r12
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    16ec:	2a 94       	dec	r2
    16ee:	f4 cf       	rjmp	.-24     	; 0x16d8 <vfprintf+0x1ae>
    16f0:	f5 01       	movw	r30, r10
    16f2:	37 fc       	sbrc	r3, 7
    16f4:	85 91       	lpm	r24, Z+
    16f6:	37 fe       	sbrs	r3, 7
    16f8:	81 91       	ld	r24, Z+
    16fa:	5f 01       	movw	r10, r30
    16fc:	b6 01       	movw	r22, r12
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    1704:	21 10       	cpse	r2, r1
    1706:	2a 94       	dec	r2
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	82 1a       	sub	r8, r18
    170c:	91 08       	sbc	r9, r1
    170e:	81 14       	cp	r8, r1
    1710:	91 04       	cpc	r9, r1
    1712:	71 f7       	brne	.-36     	; 0x16f0 <vfprintf+0x1c6>
    1714:	e8 c0       	rjmp	.+464    	; 0x18e6 <vfprintf+0x3bc>
    1716:	84 36       	cpi	r24, 0x64	; 100
    1718:	11 f0       	breq	.+4      	; 0x171e <vfprintf+0x1f4>
    171a:	89 36       	cpi	r24, 0x69	; 105
    171c:	41 f5       	brne	.+80     	; 0x176e <vfprintf+0x244>
    171e:	f8 01       	movw	r30, r16
    1720:	37 fe       	sbrs	r3, 7
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <vfprintf+0x208>
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0c 5f       	subi	r16, 0xFC	; 252
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <vfprintf+0x218>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	07 2e       	mov	r0, r23
    1738:	00 0c       	add	r0, r0
    173a:	88 0b       	sbc	r24, r24
    173c:	99 0b       	sbc	r25, r25
    173e:	0e 5f       	subi	r16, 0xFE	; 254
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	f3 2d       	mov	r31, r3
    1744:	ff 76       	andi	r31, 0x6F	; 111
    1746:	3f 2e       	mov	r3, r31
    1748:	97 ff       	sbrs	r25, 7
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x234>
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	f0 68       	ori	r31, 0x80	; 128
    175c:	3f 2e       	mov	r3, r31
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	a3 01       	movw	r20, r6
    1764:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__ultoa_invert>
    1768:	88 2e       	mov	r8, r24
    176a:	86 18       	sub	r8, r6
    176c:	45 c0       	rjmp	.+138    	; 0x17f8 <vfprintf+0x2ce>
    176e:	85 37       	cpi	r24, 0x75	; 117
    1770:	31 f4       	brne	.+12     	; 0x177e <vfprintf+0x254>
    1772:	23 2d       	mov	r18, r3
    1774:	2f 7e       	andi	r18, 0xEF	; 239
    1776:	b2 2e       	mov	r11, r18
    1778:	2a e0       	ldi	r18, 0x0A	; 10
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	25 c0       	rjmp	.+74     	; 0x17c8 <vfprintf+0x29e>
    177e:	93 2d       	mov	r25, r3
    1780:	99 7f       	andi	r25, 0xF9	; 249
    1782:	b9 2e       	mov	r11, r25
    1784:	8f 36       	cpi	r24, 0x6F	; 111
    1786:	c1 f0       	breq	.+48     	; 0x17b8 <vfprintf+0x28e>
    1788:	18 f4       	brcc	.+6      	; 0x1790 <vfprintf+0x266>
    178a:	88 35       	cpi	r24, 0x58	; 88
    178c:	79 f0       	breq	.+30     	; 0x17ac <vfprintf+0x282>
    178e:	b5 c0       	rjmp	.+362    	; 0x18fa <vfprintf+0x3d0>
    1790:	80 37       	cpi	r24, 0x70	; 112
    1792:	19 f0       	breq	.+6      	; 0x179a <vfprintf+0x270>
    1794:	88 37       	cpi	r24, 0x78	; 120
    1796:	21 f0       	breq	.+8      	; 0x17a0 <vfprintf+0x276>
    1798:	b0 c0       	rjmp	.+352    	; 0x18fa <vfprintf+0x3d0>
    179a:	e9 2f       	mov	r30, r25
    179c:	e0 61       	ori	r30, 0x10	; 16
    179e:	be 2e       	mov	r11, r30
    17a0:	b4 fe       	sbrs	r11, 4
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <vfprintf+0x294>
    17a4:	fb 2d       	mov	r31, r11
    17a6:	f4 60       	ori	r31, 0x04	; 4
    17a8:	bf 2e       	mov	r11, r31
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x294>
    17ac:	34 fe       	sbrs	r3, 4
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <vfprintf+0x29a>
    17b0:	29 2f       	mov	r18, r25
    17b2:	26 60       	ori	r18, 0x06	; 6
    17b4:	b2 2e       	mov	r11, r18
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x29a>
    17b8:	28 e0       	ldi	r18, 0x08	; 8
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <vfprintf+0x29e>
    17be:	20 e1       	ldi	r18, 0x10	; 16
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x29e>
    17c4:	20 e1       	ldi	r18, 0x10	; 16
    17c6:	32 e0       	ldi	r19, 0x02	; 2
    17c8:	f8 01       	movw	r30, r16
    17ca:	b7 fe       	sbrs	r11, 7
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <vfprintf+0x2b2>
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	0c 5f       	subi	r16, 0xFC	; 252
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <vfprintf+0x2be>
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 5f       	subi	r16, 0xFE	; 254
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	a3 01       	movw	r20, r6
    17ea:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__ultoa_invert>
    17ee:	88 2e       	mov	r8, r24
    17f0:	86 18       	sub	r8, r6
    17f2:	fb 2d       	mov	r31, r11
    17f4:	ff 77       	andi	r31, 0x7F	; 127
    17f6:	3f 2e       	mov	r3, r31
    17f8:	36 fe       	sbrs	r3, 6
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <vfprintf+0x2ec>
    17fc:	23 2d       	mov	r18, r3
    17fe:	2e 7f       	andi	r18, 0xFE	; 254
    1800:	a2 2e       	mov	r10, r18
    1802:	89 14       	cp	r8, r9
    1804:	58 f4       	brcc	.+22     	; 0x181c <vfprintf+0x2f2>
    1806:	34 fe       	sbrs	r3, 4
    1808:	0b c0       	rjmp	.+22     	; 0x1820 <vfprintf+0x2f6>
    180a:	32 fc       	sbrc	r3, 2
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <vfprintf+0x2f6>
    180e:	83 2d       	mov	r24, r3
    1810:	8e 7e       	andi	r24, 0xEE	; 238
    1812:	a8 2e       	mov	r10, r24
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <vfprintf+0x2f6>
    1816:	b8 2c       	mov	r11, r8
    1818:	a3 2c       	mov	r10, r3
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x2f8>
    181c:	b8 2c       	mov	r11, r8
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <vfprintf+0x2f8>
    1820:	b9 2c       	mov	r11, r9
    1822:	a4 fe       	sbrs	r10, 4
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <vfprintf+0x31a>
    1826:	fe 01       	movw	r30, r28
    1828:	e8 0d       	add	r30, r8
    182a:	f1 1d       	adc	r31, r1
    182c:	80 81       	ld	r24, Z
    182e:	80 33       	cpi	r24, 0x30	; 48
    1830:	21 f4       	brne	.+8      	; 0x183a <vfprintf+0x310>
    1832:	9a 2d       	mov	r25, r10
    1834:	99 7e       	andi	r25, 0xE9	; 233
    1836:	a9 2e       	mov	r10, r25
    1838:	09 c0       	rjmp	.+18     	; 0x184c <vfprintf+0x322>
    183a:	a2 fe       	sbrs	r10, 2
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x320>
    183e:	b3 94       	inc	r11
    1840:	b3 94       	inc	r11
    1842:	04 c0       	rjmp	.+8      	; 0x184c <vfprintf+0x322>
    1844:	8a 2d       	mov	r24, r10
    1846:	86 78       	andi	r24, 0x86	; 134
    1848:	09 f0       	breq	.+2      	; 0x184c <vfprintf+0x322>
    184a:	b3 94       	inc	r11
    184c:	a3 fc       	sbrc	r10, 3
    184e:	11 c0       	rjmp	.+34     	; 0x1872 <vfprintf+0x348>
    1850:	a0 fe       	sbrs	r10, 0
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <vfprintf+0x336>
    1854:	b2 14       	cp	r11, r2
    1856:	88 f4       	brcc	.+34     	; 0x187a <vfprintf+0x350>
    1858:	28 0c       	add	r2, r8
    185a:	92 2c       	mov	r9, r2
    185c:	9b 18       	sub	r9, r11
    185e:	0e c0       	rjmp	.+28     	; 0x187c <vfprintf+0x352>
    1860:	b2 14       	cp	r11, r2
    1862:	60 f4       	brcc	.+24     	; 0x187c <vfprintf+0x352>
    1864:	b6 01       	movw	r22, r12
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    186e:	b3 94       	inc	r11
    1870:	f7 cf       	rjmp	.-18     	; 0x1860 <vfprintf+0x336>
    1872:	b2 14       	cp	r11, r2
    1874:	18 f4       	brcc	.+6      	; 0x187c <vfprintf+0x352>
    1876:	2b 18       	sub	r2, r11
    1878:	02 c0       	rjmp	.+4      	; 0x187e <vfprintf+0x354>
    187a:	98 2c       	mov	r9, r8
    187c:	21 2c       	mov	r2, r1
    187e:	a4 fe       	sbrs	r10, 4
    1880:	10 c0       	rjmp	.+32     	; 0x18a2 <vfprintf+0x378>
    1882:	b6 01       	movw	r22, r12
    1884:	80 e3       	ldi	r24, 0x30	; 48
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    188c:	a2 fe       	sbrs	r10, 2
    188e:	17 c0       	rjmp	.+46     	; 0x18be <vfprintf+0x394>
    1890:	a1 fc       	sbrc	r10, 1
    1892:	03 c0       	rjmp	.+6      	; 0x189a <vfprintf+0x370>
    1894:	88 e7       	ldi	r24, 0x78	; 120
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x374>
    189a:	88 e5       	ldi	r24, 0x58	; 88
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b6 01       	movw	r22, r12
    18a0:	0c c0       	rjmp	.+24     	; 0x18ba <vfprintf+0x390>
    18a2:	8a 2d       	mov	r24, r10
    18a4:	86 78       	andi	r24, 0x86	; 134
    18a6:	59 f0       	breq	.+22     	; 0x18be <vfprintf+0x394>
    18a8:	a1 fe       	sbrs	r10, 1
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x386>
    18ac:	8b e2       	ldi	r24, 0x2B	; 43
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vfprintf+0x388>
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	a7 fc       	sbrc	r10, 7
    18b4:	8d e2       	ldi	r24, 0x2D	; 45
    18b6:	b6 01       	movw	r22, r12
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    18be:	89 14       	cp	r8, r9
    18c0:	38 f4       	brcc	.+14     	; 0x18d0 <vfprintf+0x3a6>
    18c2:	b6 01       	movw	r22, r12
    18c4:	80 e3       	ldi	r24, 0x30	; 48
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    18cc:	9a 94       	dec	r9
    18ce:	f7 cf       	rjmp	.-18     	; 0x18be <vfprintf+0x394>
    18d0:	8a 94       	dec	r8
    18d2:	f3 01       	movw	r30, r6
    18d4:	e8 0d       	add	r30, r8
    18d6:	f1 1d       	adc	r31, r1
    18d8:	80 81       	ld	r24, Z
    18da:	b6 01       	movw	r22, r12
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    18e2:	81 10       	cpse	r8, r1
    18e4:	f5 cf       	rjmp	.-22     	; 0x18d0 <vfprintf+0x3a6>
    18e6:	22 20       	and	r2, r2
    18e8:	09 f4       	brne	.+2      	; 0x18ec <vfprintf+0x3c2>
    18ea:	42 ce       	rjmp	.-892    	; 0x1570 <vfprintf+0x46>
    18ec:	b6 01       	movw	r22, r12
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <fputc>
    18f6:	2a 94       	dec	r2
    18f8:	f6 cf       	rjmp	.-20     	; 0x18e6 <vfprintf+0x3bc>
    18fa:	f6 01       	movw	r30, r12
    18fc:	86 81       	ldd	r24, Z+6	; 0x06
    18fe:	97 81       	ldd	r25, Z+7	; 0x07
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x3dc>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
    1906:	2b 96       	adiw	r28, 0x0b	; 11
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	9f 90       	pop	r9
    1922:	8f 90       	pop	r8
    1924:	7f 90       	pop	r7
    1926:	6f 90       	pop	r6
    1928:	5f 90       	pop	r5
    192a:	4f 90       	pop	r4
    192c:	3f 90       	pop	r3
    192e:	2f 90       	pop	r2
    1930:	08 95       	ret

00001932 <__ctype_isfalse>:
    1932:	99 27       	eor	r25, r25
    1934:	88 27       	eor	r24, r24

00001936 <__ctype_istrue>:
    1936:	08 95       	ret

00001938 <strnlen_P>:
    1938:	fc 01       	movw	r30, r24
    193a:	05 90       	lpm	r0, Z+
    193c:	61 50       	subi	r22, 0x01	; 1
    193e:	70 40       	sbci	r23, 0x00	; 0
    1940:	01 10       	cpse	r0, r1
    1942:	d8 f7       	brcc	.-10     	; 0x193a <strnlen_P+0x2>
    1944:	80 95       	com	r24
    1946:	90 95       	com	r25
    1948:	8e 0f       	add	r24, r30
    194a:	9f 1f       	adc	r25, r31
    194c:	08 95       	ret

0000194e <strnlen>:
    194e:	fc 01       	movw	r30, r24
    1950:	61 50       	subi	r22, 0x01	; 1
    1952:	70 40       	sbci	r23, 0x00	; 0
    1954:	01 90       	ld	r0, Z+
    1956:	01 10       	cpse	r0, r1
    1958:	d8 f7       	brcc	.-10     	; 0x1950 <strnlen+0x2>
    195a:	80 95       	com	r24
    195c:	90 95       	com	r25
    195e:	8e 0f       	add	r24, r30
    1960:	9f 1f       	adc	r25, r31
    1962:	08 95       	ret

00001964 <fputc>:
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	fb 01       	movw	r30, r22
    196e:	23 81       	ldd	r18, Z+3	; 0x03
    1970:	21 fd       	sbrc	r18, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <fputc+0x16>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	9f ef       	ldi	r25, 0xFF	; 255
    1978:	2c c0       	rjmp	.+88     	; 0x19d2 <fputc+0x6e>
    197a:	22 ff       	sbrs	r18, 2
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <fputc+0x46>
    197e:	46 81       	ldd	r20, Z+6	; 0x06
    1980:	57 81       	ldd	r21, Z+7	; 0x07
    1982:	24 81       	ldd	r18, Z+4	; 0x04
    1984:	35 81       	ldd	r19, Z+5	; 0x05
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	44 f4       	brge	.+16     	; 0x199c <fputc+0x38>
    198c:	a0 81       	ld	r26, Z
    198e:	b1 81       	ldd	r27, Z+1	; 0x01
    1990:	9d 01       	movw	r18, r26
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	20 83       	st	Z, r18
    1998:	31 83       	std	Z+1, r19	; 0x01
    199a:	8c 93       	st	X, r24
    199c:	26 81       	ldd	r18, Z+6	; 0x06
    199e:	37 81       	ldd	r19, Z+7	; 0x07
    19a0:	2f 5f       	subi	r18, 0xFF	; 255
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	26 83       	std	Z+6, r18	; 0x06
    19a6:	37 83       	std	Z+7, r19	; 0x07
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <fputc+0x6e>
    19aa:	8b 01       	movw	r16, r22
    19ac:	ec 01       	movw	r28, r24
    19ae:	fb 01       	movw	r30, r22
    19b0:	00 84       	ldd	r0, Z+8	; 0x08
    19b2:	f1 85       	ldd	r31, Z+9	; 0x09
    19b4:	e0 2d       	mov	r30, r0
    19b6:	19 95       	eicall
    19b8:	89 2b       	or	r24, r25
    19ba:	e1 f6       	brne	.-72     	; 0x1974 <fputc+0x10>
    19bc:	d8 01       	movw	r26, r16
    19be:	16 96       	adiw	r26, 0x06	; 6
    19c0:	8d 91       	ld	r24, X+
    19c2:	9c 91       	ld	r25, X
    19c4:	17 97       	sbiw	r26, 0x07	; 7
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	16 96       	adiw	r26, 0x06	; 6
    19ca:	8d 93       	st	X+, r24
    19cc:	9c 93       	st	X, r25
    19ce:	17 97       	sbiw	r26, 0x07	; 7
    19d0:	ce 01       	movw	r24, r28
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <__ultoa_invert>:
    19dc:	fa 01       	movw	r30, r20
    19de:	aa 27       	eor	r26, r26
    19e0:	28 30       	cpi	r18, 0x08	; 8
    19e2:	51 f1       	breq	.+84     	; 0x1a38 <__ultoa_invert+0x5c>
    19e4:	20 31       	cpi	r18, 0x10	; 16
    19e6:	81 f1       	breq	.+96     	; 0x1a48 <__ultoa_invert+0x6c>
    19e8:	e8 94       	clt
    19ea:	6f 93       	push	r22
    19ec:	6e 7f       	andi	r22, 0xFE	; 254
    19ee:	6e 5f       	subi	r22, 0xFE	; 254
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	af 4f       	sbci	r26, 0xFF	; 255
    19f8:	b1 e0       	ldi	r27, 0x01	; 1
    19fa:	3e d0       	rcall	.+124    	; 0x1a78 <__ultoa_invert+0x9c>
    19fc:	b4 e0       	ldi	r27, 0x04	; 4
    19fe:	3c d0       	rcall	.+120    	; 0x1a78 <__ultoa_invert+0x9c>
    1a00:	67 0f       	add	r22, r23
    1a02:	78 1f       	adc	r23, r24
    1a04:	89 1f       	adc	r24, r25
    1a06:	9a 1f       	adc	r25, r26
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	68 0f       	add	r22, r24
    1a0c:	79 1f       	adc	r23, r25
    1a0e:	8a 1f       	adc	r24, r26
    1a10:	91 1d       	adc	r25, r1
    1a12:	a1 1d       	adc	r26, r1
    1a14:	6a 0f       	add	r22, r26
    1a16:	71 1d       	adc	r23, r1
    1a18:	81 1d       	adc	r24, r1
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	20 d0       	rcall	.+64     	; 0x1a60 <__ultoa_invert+0x84>
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__ultoa_invert+0x48>
    1a22:	68 94       	set
    1a24:	3f 91       	pop	r19
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	26 9f       	mul	r18, r22
    1a2a:	11 24       	eor	r1, r1
    1a2c:	30 19       	sub	r19, r0
    1a2e:	30 5d       	subi	r19, 0xD0	; 208
    1a30:	31 93       	st	Z+, r19
    1a32:	de f6       	brtc	.-74     	; 0x19ea <__ultoa_invert+0xe>
    1a34:	cf 01       	movw	r24, r30
    1a36:	08 95       	ret
    1a38:	46 2f       	mov	r20, r22
    1a3a:	47 70       	andi	r20, 0x07	; 7
    1a3c:	40 5d       	subi	r20, 0xD0	; 208
    1a3e:	41 93       	st	Z+, r20
    1a40:	b3 e0       	ldi	r27, 0x03	; 3
    1a42:	0f d0       	rcall	.+30     	; 0x1a62 <__ultoa_invert+0x86>
    1a44:	c9 f7       	brne	.-14     	; 0x1a38 <__ultoa_invert+0x5c>
    1a46:	f6 cf       	rjmp	.-20     	; 0x1a34 <__ultoa_invert+0x58>
    1a48:	46 2f       	mov	r20, r22
    1a4a:	4f 70       	andi	r20, 0x0F	; 15
    1a4c:	40 5d       	subi	r20, 0xD0	; 208
    1a4e:	4a 33       	cpi	r20, 0x3A	; 58
    1a50:	18 f0       	brcs	.+6      	; 0x1a58 <__ultoa_invert+0x7c>
    1a52:	49 5d       	subi	r20, 0xD9	; 217
    1a54:	31 fd       	sbrc	r19, 1
    1a56:	40 52       	subi	r20, 0x20	; 32
    1a58:	41 93       	st	Z+, r20
    1a5a:	02 d0       	rcall	.+4      	; 0x1a60 <__ultoa_invert+0x84>
    1a5c:	a9 f7       	brne	.-22     	; 0x1a48 <__ultoa_invert+0x6c>
    1a5e:	ea cf       	rjmp	.-44     	; 0x1a34 <__ultoa_invert+0x58>
    1a60:	b4 e0       	ldi	r27, 0x04	; 4
    1a62:	a6 95       	lsr	r26
    1a64:	97 95       	ror	r25
    1a66:	87 95       	ror	r24
    1a68:	77 95       	ror	r23
    1a6a:	67 95       	ror	r22
    1a6c:	ba 95       	dec	r27
    1a6e:	c9 f7       	brne	.-14     	; 0x1a62 <__ultoa_invert+0x86>
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	61 05       	cpc	r22, r1
    1a74:	71 05       	cpc	r23, r1
    1a76:	08 95       	ret
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	0a 2e       	mov	r0, r26
    1a7e:	06 94       	lsr	r0
    1a80:	57 95       	ror	r21
    1a82:	47 95       	ror	r20
    1a84:	37 95       	ror	r19
    1a86:	27 95       	ror	r18
    1a88:	ba 95       	dec	r27
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__ultoa_invert+0xa2>
    1a8c:	62 0f       	add	r22, r18
    1a8e:	73 1f       	adc	r23, r19
    1a90:	84 1f       	adc	r24, r20
    1a92:	95 1f       	adc	r25, r21
    1a94:	a0 1d       	adc	r26, r0
    1a96:	08 95       	ret

00001a98 <__muluhisi3>:
    1a98:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__umulhisi3>
    1a9c:	a5 9f       	mul	r26, r21
    1a9e:	90 0d       	add	r25, r0
    1aa0:	b4 9f       	mul	r27, r20
    1aa2:	90 0d       	add	r25, r0
    1aa4:	a4 9f       	mul	r26, r20
    1aa6:	80 0d       	add	r24, r0
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	11 24       	eor	r1, r1
    1aac:	08 95       	ret

00001aae <__umulhisi3>:
    1aae:	a2 9f       	mul	r26, r18
    1ab0:	b0 01       	movw	r22, r0
    1ab2:	b3 9f       	mul	r27, r19
    1ab4:	c0 01       	movw	r24, r0
    1ab6:	a3 9f       	mul	r26, r19
    1ab8:	70 0d       	add	r23, r0
    1aba:	81 1d       	adc	r24, r1
    1abc:	11 24       	eor	r1, r1
    1abe:	91 1d       	adc	r25, r1
    1ac0:	b2 9f       	mul	r27, r18
    1ac2:	70 0d       	add	r23, r0
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	91 1d       	adc	r25, r1
    1aca:	08 95       	ret

00001acc <_exit>:
    1acc:	f8 94       	cli

00001ace <__stop_program>:
    1ace:	ff cf       	rjmp	.-2      	; 0x1ace <__stop_program>
